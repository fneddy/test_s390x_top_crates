[lazy_static] download directory: /tmp/top100_artifacts/lazy_static-1.5.0
+ curl -sL https://crates.io/api/v1/crates/lazy_static/1.5.0/download
+ tar xzf -
+ cd /tmp/top100_artifacts/lazy_static-1.5.0
+ cargo clean
     Removed 0 files
+ cargo +stable test ''
warning: no edition set: defaulting to the 2015 edition while the latest is 2024
    Blocking waiting for file lock on package cache
   Compiling serde v1.0.203
   Compiling proc-macro2 v1.0.86
   Compiling unicode-ident v1.0.12
   Compiling hashbrown v0.14.5
   Compiling equivalent v1.0.1
   Compiling winnow v0.6.13
   Compiling indexmap v2.2.6
   Compiling quote v1.0.36
   Compiling serde_json v1.0.117
   Compiling syn v2.0.67
   Compiling doc-comment v0.3.3
   Compiling ryu v1.0.18
   Compiling itoa v1.0.11
   Compiling trybuild v1.0.96
   Compiling glob v0.3.1
   Compiling termcolor v1.4.1
   Compiling lazy_static v1.5.0 (/tmp/top100_artifacts/lazy_static-1.5.0)
warning: elided lifetime has a name
  --> src/inline_lazy.rs:26:43
   |
26 |     pub fn get<F>(&'static self, f: F) -> &T
   |                                           ^ this elided lifetime gets resolved as `'static`
   |
   = note: `#[warn(elided_named_lifetimes)]` on by default
help: consider specifying it explicitly
   |
26 |     pub fn get<F>(&'static self, f: F) -> &'static T
   |                                            +++++++

warning: `lazy_static` (lib) generated 1 warning (run `cargo fix --lib -p lazy_static` to apply 1 suggestion)
   Compiling serde_spanned v0.6.6
   Compiling toml_datetime v0.6.6
   Compiling toml_edit v0.22.14
   Compiling serde_derive v1.0.203
   Compiling toml v0.8.14
warning: `lazy_static` (lib test) generated 1 warning (1 duplicate)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 18.26s
     Running unittests src/lib.rs (target/debug/deps/lazy_static-988ab985184c1842)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running tests/no_std.rs (target/debug/deps/no_std-471dc1aaa52f8342)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running tests/test.rs (target/debug/deps/test-c05519e3b165b4a2)

running 9 tests
test item_name_shadowing ... ok
test pre_init ... ok
test s3 ... ok
test lifetime_name ... ok
test test_meta ... ok
test test_repeat ... ok
test test_visibility ... ok
test visibility::sub_test ... ok
test test_basic ... ok

test result: ok. 9 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.01s

     Running tests/ui.rs (target/debug/deps/ui-fa0aeda61faffb27)

running 1 test
warning: /tmp/top100_artifacts/lazy_static-1.5.0/Cargo.toml: no edition set: defaulting to the 2015 edition while the latest is 2024
   Compiling doc-comment v0.3.3
    Checking lazy_static v1.5.0 (/tmp/top100_artifacts/lazy_static-1.5.0)
warning: elided lifetime has a name
  --> /tmp/top100_artifacts/lazy_static-1.5.0/src/inline_lazy.rs:26:43
   |
26 |     pub fn get<F>(&'static self, f: F) -> &T
   |                                           ^ this elided lifetime gets resolved as `'static`
   |
   = note: `#[warn(elided_named_lifetimes)]` on by default
help: consider specifying it explicitly
   |
26 |     pub fn get<F>(&'static self, f: F) -> &'static T
   |                                            +++++++

warning: `lazy_static` (lib) generated 1 warning (run `cargo fix --lib -p lazy_static` to apply 1 suggestion)
    Checking lazy_static-tests v0.0.0 (/tmp/top100_artifacts/lazy_static-1.5.0/target/tests/trybuild/lazy_static)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.51s


test [0m[1mtests/compile_fail/incorrect_visibility_restriction.rs[0m ... [0m[1m[31mmismatch
[0m
[0m[1m[34mEXPECTED:
[0m[34mâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆ
[0m[34merror[E0704]: incorrect visibility restriction
[0m[34m --> tests/compile_fail/incorrect_visibility_restriction.rs:5:9
[0m[34m  |
[0m[34m5 |     pub(nonsense) static ref WRONG: () = ();
[0m[34m  |         ^^^^^^^^ help: make this visible only to module `nonsense` with `in`: `in nonsense`
[0m[34m  |
[0m[34m  = help: some possible visibility restrictions are:
[0m[34m          `pub(crate)`: visible only on the current crate
[0m[34m          `pub(super)`: visible only in the current module's parent
[0m[34m          `pub(in path::to::module)`: visible only on the specified path
[0m[34mâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆ
[0m
[0m[1m[31mACTUAL OUTPUT:
[0m[31mâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆ
[0m[31merror[E0704]: incorrect visibility restriction
[0m[31m --> tests/compile_fail/incorrect_visibility_restriction.rs:5:9
[0m[31m  |
[0m[31m5 |     pub(nonsense) static ref WRONG: () = ();
[0m[31m  |         ^^^^^^^^
[0m[31m  |
[0m[31m  = help: some possible visibility restrictions are:
[0m[31m          `pub(crate)`: visible only on the current crate
[0m[31m          `pub(super)`: visible only in the current module's parent
[0m[31m          `pub(in path::to::module)`: visible only on the specified path
[0m[31mhelp: make this visible only to module `nonsense` with `in`
[0m[31m  |
[0m[31m5 |     pub(in nonsense) static ref WRONG: () = ();
[0m[31m  |         ++
[0m[31mâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆ
[0mnote: If the [0m[31mactual output[0m is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite

test [0m[1mtests/compile_fail/static_is_private.rs[0m ... [0m[32mok
[0mtest [0m[1mtests/compile_fail/static_is_sized.rs[0m ... [0m[1m[31mmismatch
[0m
[0m[1m[34mEXPECTED:
[0m[34mâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆ
[0m[34merror[E0277]: the size for values of type `str` cannot be known at compilation time
[0m[34m --> tests/compile_fail/static_is_sized.rs:4:1
[0m[34m  |
[0m[34m4 | / lazy_static! {
[0m[34m5 | |     pub static ref FOO: str = panic!();
[0m[34m6 | | }
[0m[34m  | |_^ doesn't have a size known at compile-time
[0m[34m  |
[0m[34m  = help: the trait `Sized` is not implemented for `str`
[0m[34mnote: required by an implicit `Sized` bound in `Lazy`
[0m[34m --> src/inline_lazy.rs
[0m[34m  |
[0m[34m  | pub struct Lazy<T: Sync>(Cell<MaybeUninit<T>>, Once);
[0m[34m  |                 ^ required by the implicit `Sized` requirement on this type parameter in `Lazy`
[0m[34m  = note: this error originates in the macro `__lazy_static_create` which comes from the expansion of the macro `lazy_static` (in Nightly builds, run with -Z macro-backtrace for more info)
[0m[34m
[0m[34merror[E0277]: the size for values of type `str` cannot be known at compilation time
[0m[34m --> tests/compile_fail/static_is_sized.rs:4:1
[0m[34m  |
[0m[34m4 | / lazy_static! {
[0m[34m5 | |     pub static ref FOO: str = panic!();
[0m[34m6 | | }
[0m[34m  | |_^ doesn't have a size known at compile-time
[0m[34m  |
[0m[34m  = help: the trait `Sized` is not implemented for `str`
[0m[34mnote: required by an implicit `Sized` bound in `Lazy`
[0m[34m --> src/inline_lazy.rs
[0m[34m  |
[0m[34m  | pub struct Lazy<T: Sync>(Cell<MaybeUninit<T>>, Once);
[0m[34m  |                 ^ required by the implicit `Sized` requirement on this type parameter in `Lazy`
[0m[34m  = note: this error originates in the macro `__lazy_static_create` which comes from the expansion of the macro `lazy_static` (in Nightly builds, run with -Z macro-backtrace for more info)
[0m[34m
[0m[34merror[E0277]: the size for values of type `str` cannot be known at compilation time
[0m[34m --> tests/compile_fail/static_is_sized.rs:5:25
[0m[34m  |
[0m[34m5 |     pub static ref FOO: str = panic!();
[0m[34m  |                         ^^^ doesn't have a size known at compile-time
[0m[34m  |
[0m[34m  = help: the trait `Sized` is not implemented for `str`
[0m[34m  = note: the return type of a function must have a statically known size
[0m[34m
[0m[34merror[E0599]: the method `get` exists for struct `Lazy<str>`, but its trait bounds were not satisfied
[0m[34m --> tests/compile_fail/static_is_sized.rs:4:1
[0m[34m  |
[0m[34m4 | / lazy_static! {
[0m[34m5 | |     pub static ref FOO: str = panic!();
[0m[34m6 | | }
[0m[34m  | |_^ method cannot be called on `Lazy<str>` due to unsatisfied trait bounds
[0m[34m  |
[0m[34m  = note: the following trait bounds were not satisfied:
[0m[34m          `str: Sized`
[0m[34m  = note: this error originates in the macro `__lazy_static_internal` which comes from the expansion of the macro `lazy_static` (in Nightly builds, run with -Z macro-backtrace for more info)
[0m[34m
[0m[34merror[E0277]: the size for values of type `str` cannot be known at compilation time
[0m[34m --> tests/compile_fail/static_is_sized.rs:4:1
[0m[34m  |
[0m[34m4 | / lazy_static! {
[0m[34m5 | |     pub static ref FOO: str = panic!();
[0m[34m6 | | }
[0m[34m  | |_^ doesn't have a size known at compile-time
[0m[34m  |
[0m[34m  = help: the trait `Sized` is not implemented for `str`
[0m[34m  = note: the return type of a function must have a statically known size
[0m[34m  = note: this error originates in the macro `__lazy_static_internal` which comes from the expansion of the macro `lazy_static` (in Nightly builds, run with -Z macro-backtrace for more info)
[0m[34mâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆ
[0m
[0m[1m[31mACTUAL OUTPUT:
[0m[31mâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆ
[0m[31merror[E0277]: the size for values of type `str` cannot be known at compilation time
[0m[31m --> tests/compile_fail/static_is_sized.rs:5:25
[0m[31m  |
[0m[31m5 |     pub static ref FOO: str = panic!();
[0m[31m  |                         ^^^ doesn't have a size known at compile-time
[0m[31m  |
[0m[31m  = help: the trait `Sized` is not implemented for `str`
[0m[31m  = note: the return type of a function must have a statically known size
[0m[31m
[0m[31merror[E0277]: the size for values of type `str` cannot be known at compilation time
[0m[31m --> tests/compile_fail/static_is_sized.rs:4:1
[0m[31m  |
[0m[31m4 | / lazy_static! {
[0m[31m5 | |     pub static ref FOO: str = panic!();
[0m[31m6 | | }
[0m[31m  | |_^ doesn't have a size known at compile-time
[0m[31m  |
[0m[31m  = help: the trait `Sized` is not implemented for `str`
[0m[31mnote: required by an implicit `Sized` bound in `Lazy`
[0m[31m --> src/inline_lazy.rs
[0m[31m  |
[0m[31m  | pub struct Lazy<T: Sync>(Cell<MaybeUninit<T>>, Once);
[0m[31m  |                 ^ required by the implicit `Sized` requirement on this type parameter in `Lazy`
[0m[31m  = note: this error originates in the macro `__lazy_static_create` which comes from the expansion of the macro `lazy_static` (in Nightly builds, run with -Z macro-backtrace for more info)
[0m[31m
[0m[31merror[E0277]: the size for values of type `str` cannot be known at compilation time
[0m[31m --> tests/compile_fail/static_is_sized.rs:4:1
[0m[31m  |
[0m[31m4 | / lazy_static! {
[0m[31m5 | |     pub static ref FOO: str = panic!();
[0m[31m6 | | }
[0m[31m  | |_^ doesn't have a size known at compile-time
[0m[31m  |
[0m[31m  = help: the trait `Sized` is not implemented for `str`
[0m[31mnote: required by an implicit `Sized` bound in `Lazy`
[0m[31m --> src/inline_lazy.rs
[0m[31m  |
[0m[31m  | pub struct Lazy<T: Sync>(Cell<MaybeUninit<T>>, Once);
[0m[31m  |                 ^ required by the implicit `Sized` requirement on this type parameter in `Lazy`
[0m[31m  = note: this error originates in the macro `__lazy_static_create` which comes from the expansion of the macro `lazy_static` (in Nightly builds, run with -Z macro-backtrace for more info)
[0m[31m
[0m[31merror[E0599]: the method `get` exists for struct `Lazy<str>`, but its trait bounds were not satisfied
[0m[31m --> tests/compile_fail/static_is_sized.rs:4:1
[0m[31m  |
[0m[31m4 | / lazy_static! {
[0m[31m5 | |     pub static ref FOO: str = panic!();
[0m[31m6 | | }
[0m[31m  | |_^ method cannot be called on `Lazy<str>` due to unsatisfied trait bounds
[0m[31m  |
[0m[31m  = note: the following trait bounds were not satisfied:
[0m[31m          `str: Sized`
[0m[31m  = note: this error originates in the macro `__lazy_static_internal` which comes from the expansion of the macro `lazy_static` (in Nightly builds, run with -Z macro-backtrace for more info)
[0m[31m
[0m[31merror[E0277]: the size for values of type `str` cannot be known at compilation time
[0m[31m --> tests/compile_fail/static_is_sized.rs:4:1
[0m[31m  |
[0m[31m4 | / lazy_static! {
[0m[31m5 | |     pub static ref FOO: str = panic!();
[0m[31m6 | | }
[0m[31m  | |_^ doesn't have a size known at compile-time
[0m[31m  |
[0m[31m  = help: the trait `Sized` is not implemented for `str`
[0m[31m  = note: the return type of a function must have a statically known size
[0m[31m  = note: this error originates in the macro `__lazy_static_internal` which comes from the expansion of the macro `lazy_static` (in Nightly builds, run with -Z macro-backtrace for more info)
[0m[31mâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆâ”ˆ
[0mnote: If the [0m[31mactual output[0m is the correct output you can bless it by rerunning
      your test with the environment variable TRYBUILD=overwrite



test ui ... FAILED

failures:

---- ui stdout ----

thread 'ui' panicked at /home/eddy/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/trybuild-1.0.96/src/run.rs:101:13:
2 of 3 tests failed
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    ui

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.68s

error: test failed, to rerun pass `--test ui`
+ RESULT=101
+ cd /tmp/top100_artifacts
+ rm -rf /tmp/top100_artifacts/lazy_static-1.5.0
+ exit 101
