[lock_api] download directory: /tmp/top100_artifacts/lock_api-0.4.12
+ curl -sL https://crates.io/api/v1/crates/lock_api/0.4.12/download
+ tar xzf -
+ cd /tmp/top100_artifacts/lock_api-0.4.12
+ cargo clean
     Removed 0 files
+ cargo +stable test ''
    Updating crates.io index
    Blocking waiting for file lock on package cache
     Locking 10 packages to latest compatible versions
    Blocking waiting for file lock on package cache
   Compiling autocfg v1.4.0
   Compiling scopeguard v1.2.0
   Compiling lock_api v0.4.12 (/tmp/top100_artifacts/lock_api-0.4.12)
warning: unexpected `cfg` condition name: `has_const_fn_trait_bound`
   --> src/mutex.rs:148:11
    |
148 |     #[cfg(has_const_fn_trait_bound)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_const_fn_trait_bound)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `has_const_fn_trait_bound`
   --> src/mutex.rs:158:15
    |
158 |     #[cfg(not(has_const_fn_trait_bound))]
    |               ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_const_fn_trait_bound)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `has_const_fn_trait_bound`
   --> src/remutex.rs:232:11
    |
232 |     #[cfg(has_const_fn_trait_bound)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_const_fn_trait_bound)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `has_const_fn_trait_bound`
   --> src/remutex.rs:247:15
    |
247 |     #[cfg(not(has_const_fn_trait_bound))]
    |               ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_const_fn_trait_bound)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `has_const_fn_trait_bound`
   --> src/rwlock.rs:369:11
    |
369 |     #[cfg(has_const_fn_trait_bound)]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_const_fn_trait_bound)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `has_const_fn_trait_bound`
   --> src/rwlock.rs:379:15
    |
379 |     #[cfg(not(has_const_fn_trait_bound))]
    |               ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_const_fn_trait_bound)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_const_fn_trait_bound)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: field `0` is never read
   --> src/lib.rs:103:24
    |
103 | pub struct GuardNoSend(*mut ());
    |            ----------- ^^^^^^^
    |            |
    |            field in this struct
    |
    = help: consider removing this field
    = note: `#[warn(dead_code)]` on by default

warning: `lock_api` (lib test) generated 7 warnings
    Finished `test` profile [unoptimized + debuginfo] target(s) in 1.43s
     Running unittests src/lib.rs (target/debug/deps/lock_api-2627dc543a4e4465)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

+ RESULT=0
+ cd /tmp/top100_artifacts
+ rm -rf /tmp/top100_artifacts/lock_api-0.4.12
+ exit 0
