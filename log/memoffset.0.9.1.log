[memoffset] download directory: /var/tmp/top100_artifacts/memoffset-0.9.1
+ tar xzf -
+ curl -sL https://crates.io/api/v1/crates/memoffset/0.9.1/download
+ cd /var/tmp/top100_artifacts/memoffset-0.9.1
+ cargo clean
     Removed 0 files
+ cargo +stable test ''
warning: no edition set: defaulting to the 2015 edition while the latest is 2024
    Updating crates.io index
     Locking 2 packages to latest compatible versions
   Compiling autocfg v1.4.0
   Compiling doc-comment v0.3.3
   Compiling memoffset v0.9.1 (/var/tmp/top100_artifacts/memoffset-0.9.1)
warning: unexpected `cfg` condition name: `doctests`
  --> src/lib.rs:59:7
   |
59 | #[cfg(doctests)]
   |       ^^^^^^^^ help: there is a config with a similar name: `doctest`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doctests)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doctests)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `doctests`
  --> src/lib.rs:62:7
   |
62 | #[cfg(doctests)]
   |       ^^^^^^^^ help: there is a config with a similar name: `doctest`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doctests)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doctests)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `raw_ref_macros`
  --> src/raw_field.rs:22:7
   |
22 | #[cfg(raw_ref_macros)]
   |       ^^^^^^^^^^^^^^
   |
   = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(raw_ref_macros)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(raw_ref_macros)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `raw_ref_macros`
  --> src/raw_field.rs:30:11
   |
30 | #[cfg(not(raw_ref_macros))]
   |           ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(raw_ref_macros)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(raw_ref_macros)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `allow_clippy`
  --> src/raw_field.rs:57:7
   |
57 | #[cfg(allow_clippy)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(allow_clippy)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(allow_clippy)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `allow_clippy`
  --> src/raw_field.rs:69:11
   |
69 | #[cfg(not(allow_clippy))]
   |           ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(allow_clippy)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(allow_clippy)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `allow_clippy`
  --> src/raw_field.rs:90:7
   |
90 | #[cfg(allow_clippy)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(allow_clippy)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(allow_clippy)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `allow_clippy`
   --> src/raw_field.rs:100:11
    |
100 | #[cfg(not(allow_clippy))]
    |           ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(allow_clippy)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(allow_clippy)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `allow_clippy`
   --> src/raw_field.rs:125:7
    |
125 | #[cfg(allow_clippy)]
    |       ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(allow_clippy)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(allow_clippy)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `allow_clippy`
   --> src/raw_field.rs:141:11
    |
141 | #[cfg(not(allow_clippy))]
    |           ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(allow_clippy)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(allow_clippy)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tuple_ty`
   --> src/raw_field.rs:183:7
    |
183 | #[cfg(tuple_ty)]
    |       ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tuple_ty)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tuple_ty)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `maybe_uninit`
  --> src/offset_of.rs:23:7
   |
23 | #[cfg(maybe_uninit)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(maybe_uninit)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(maybe_uninit)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `maybe_uninit`
  --> src/offset_of.rs:37:11
   |
37 | #[cfg(not(maybe_uninit))]
   |           ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(maybe_uninit)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(maybe_uninit)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `stable_const`
  --> src/offset_of.rs:49:7
   |
49 | #[cfg(stable_const)]
   |       ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(stable_const)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(stable_const)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `stable_const`
  --> src/offset_of.rs:61:11
   |
61 | #[cfg(not(stable_const))]
   |           ^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(stable_const)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(stable_const)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `stable_offset_of`
  --> src/offset_of.rs:70:11
   |
70 | #[cfg(not(stable_offset_of))]
   |           ^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(stable_offset_of)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(stable_offset_of)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `stable_offset_of`
  --> src/offset_of.rs:83:7
   |
83 | #[cfg(stable_offset_of)]
   |       ^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(stable_offset_of)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(stable_offset_of)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tuple_ty`
   --> src/offset_of.rs:127:7
    |
127 | #[cfg(tuple_ty)]
    |       ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tuple_ty)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tuple_ty)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `stable_offset_of`
   --> src/offset_of.rs:128:11
    |
128 | #[cfg(not(stable_offset_of))]
    |           ^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(stable_offset_of)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(stable_offset_of)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tuple_ty`
   --> src/offset_of.rs:142:7
    |
142 | #[cfg(tuple_ty)]
    |       ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tuple_ty)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tuple_ty)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `stable_offset_of`
   --> src/offset_of.rs:143:7
    |
143 | #[cfg(stable_offset_of)]
    |       ^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(stable_offset_of)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(stable_offset_of)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tuple_ty`
   --> src/offset_of.rs:160:7
    |
160 | #[cfg(tuple_ty)]
    |       ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tuple_ty)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tuple_ty)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `stable_offset_of`
   --> src/offset_of.rs:170:11
    |
170 | #[cfg(not(stable_offset_of))]
    |           ^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(stable_offset_of)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(stable_offset_of)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `stable_offset_of`
   --> src/offset_of.rs:184:7
    |
184 | #[cfg(stable_offset_of)]
    |       ^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(stable_offset_of)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(stable_offset_of)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `allow_clippy`
   --> src/offset_of.rs:223:17
    |
223 |     #![cfg_attr(allow_clippy, allow(clippy::identity_op))] // For `... + 0` constructs below.
    |                 ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(allow_clippy)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(allow_clippy)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tuple_ty`
   --> src/offset_of.rs:300:11
    |
300 |     #[cfg(tuple_ty)]
    |           ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tuple_ty)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tuple_ty)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tuple_ty`
   --> src/offset_of.rs:333:11
    |
333 |     #[cfg(tuple_ty)]
    |           ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tuple_ty)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tuple_ty)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `stable_offset_of`
   --> src/offset_of.rs:370:15
    |
370 |     #[cfg(any(stable_offset_of, stable_const))]
    |               ^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(stable_offset_of)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(stable_offset_of)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `stable_const`
   --> src/offset_of.rs:370:33
    |
370 |     #[cfg(any(stable_offset_of, stable_const))]
    |                                 ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(stable_const)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(stable_const)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `stable_offset_of`
   --> src/offset_of.rs:383:11
    |
383 |     #[cfg(stable_offset_of)]
    |           ^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(stable_offset_of)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(stable_offset_of)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `stable_offset_of`
   --> src/offset_of.rs:395:15
    |
395 |     #[cfg(any(stable_offset_of, stable_const))]
    |               ^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(stable_offset_of)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(stable_offset_of)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `stable_const`
   --> src/offset_of.rs:395:33
    |
395 |     #[cfg(any(stable_offset_of, stable_const))]
    |                                 ^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(stable_const)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(stable_const)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `memoffset` (lib test) generated 32 warnings
    Finished `test` profile [unoptimized + debuginfo] target(s) in 2.70s
     Running unittests src/lib.rs (target/debug/deps/memoffset-d1a39832846cf31a)

running 17 tests
test offset_of::tests::const_offset ... ok
test offset_of::tests::const_fn_offset ... ok
test offset_of::tests::inside_generic_method ... ok
test offset_of::tests::const_offset_interior_mutable ... ok
test offset_of::tests::offset_simple ... ok
test offset_of::tests::offset_simple_packed ... ok
test offset_of::tests::offset_union ... ok
test offset_of::tests::path ... ok
test offset_of::tests::test_raw_field ... ok
test offset_of::tests::test_raw_field_tuple ... ok
test offset_of::tests::test_raw_field_union ... ok
test offset_of::tests::test_tuple_offset ... ok
test offset_of::tests::tuple_struct ... ok
test span_of::tests::ig_test ... ok
test span_of::tests::span_forms ... ok
test span_of::tests::span_simple ... ok
test span_of::tests::span_simple_packed ... ok

test result: ok. 17 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.01s

+ RESULT=0
+ cd /var/tmp/top100_artifacts
+ rm -rf /var/tmp/top100_artifacts/memoffset-0.9.1
+ exit 0
