[syn] download directory: /var/tmp/top100_artifacts/syn-2.0.0
+ git clone -c advice.detachedHead=false -q --branch 2.0.0 --depth 1 https://github.com/dtolnay/syn .
warning: refs/tags/2.0.0 31ebf3d6058d97741e99d6d358ded5eada35de78 is not a commit!
+ cargo clean
     Removed 0 files
+ cargo +stable test --release --features test
    Updating crates.io index
     Locking 195 packages to latest compatible versions
      Adding colored v2.2.0 (available: v3.0.0)
      Adding indexmap v1.9.3 (available: v2.10.0)
      Adding reqwest v0.11.27 (available: v0.12.22)
   Compiling proc-macro2 v1.0.95
   Compiling unicode-ident v1.0.18
   Compiling libc v0.2.174
   Compiling stable_deref_trait v1.2.0
   Compiling once_cell v1.21.3
   Compiling shlex v1.3.0
   Compiling cc v1.2.29
   Compiling cfg-if v1.0.1
   Compiling pkg-config v0.3.32
   Compiling quote v1.0.40
   Compiling syn v2.0.104
   Compiling pin-project-lite v0.2.16
   Compiling vcpkg v0.2.15
   Compiling bytes v1.10.1
   Compiling litemap v0.8.0
   Compiling openssl-sys v0.9.109
   Compiling writeable v0.6.1
   Compiling bitflags v2.9.1
   Compiling memchr v2.7.5
   Compiling mio v1.0.4
   Compiling socket2 v0.5.10
   Compiling itoa v1.0.15
   Compiling icu_normalizer_data v2.0.0
   Compiling icu_properties_data v2.0.1
   Compiling futures-core v0.3.31
   Compiling tokio v1.46.1
   Compiling foreign-types-shared v0.1.1
   Compiling fnv v1.0.7
   Compiling openssl v0.10.73
   Compiling crossbeam-utils v0.8.21
   Compiling http v0.2.12
   Compiling foreign-types v0.3.2
   Compiling synstructure v0.13.2
   Compiling tracing-core v0.1.34
   Compiling native-tls v0.2.14
   Compiling futures-io v0.3.31
   Compiling smallvec v1.15.1
   Compiling futures-task v0.3.31
   Compiling pin-utils v0.1.0
   Compiling httparse v1.10.1
   Compiling zerofrom-derive v0.1.6
   Compiling yoke-derive v0.8.0
   Compiling zerovec-derive v0.11.1
   Compiling displaydoc v0.2.5
   Compiling openssl-macros v0.1.1
   Compiling zerofrom v0.1.6
   Compiling yoke v0.8.0
   Compiling hashbrown v0.15.4
   Compiling zerovec v0.11.2
   Compiling zerotrie v0.2.2
   Compiling equivalent v1.0.2
   Compiling futures-sink v0.3.31
   Compiling slab v0.4.10
   Compiling futures-util v0.3.31
   Compiling tokio-util v0.7.15
   Compiling tinystr v0.8.1
   Compiling icu_locale_core v2.0.0
   Compiling potential_utf v0.1.2
   Compiling icu_collections v2.0.0
   Compiling icu_provider v2.0.0
   Compiling indexmap v2.10.0
   Compiling icu_normalizer v2.0.0
   Compiling icu_properties v2.0.1
   Compiling tracing v0.1.41
   Compiling try-lock v0.2.5
   Compiling percent-encoding v2.3.1
   Compiling openssl-probe v0.1.6
   Compiling log v0.4.27
   Compiling serde v1.0.219
   Compiling rustix v1.0.7
   Compiling form_urlencoded v1.2.1
   Compiling want v0.3.1
   Compiling crossbeam-epoch v0.9.18
   Compiling idna_adapter v1.2.1
   Compiling h2 v0.3.27
   Compiling http-body v0.4.6
   Compiling futures-channel v0.3.31
   Compiling errno v0.3.13
   Compiling httpdate v1.0.3
   Compiling utf8_iter v1.0.4
   Compiling linux-raw-sys v0.9.4
   Compiling rayon-core v1.12.1
   Compiling crc32fast v1.5.0
   Compiling tower-service v0.3.3
   Compiling tokio-native-tls v0.3.1
   Compiling hyper v0.14.32
   Compiling idna v1.0.3
   Compiling crossbeam-deque v0.8.6
   Compiling aho-corasick v1.1.3
   Compiling adler2 v2.0.1
   Compiling ryu v1.0.20
   Compiling rustversion v1.0.21
   Compiling termcolor v1.4.1
   Compiling syn v2.0.0 (/var/tmp/top100_artifacts/syn-2.0.0)
   Compiling ref-cast v1.0.24
   Compiling regex-syntax v0.8.5
   Compiling base64 v0.21.7
   Compiling anyhow v1.0.98
   Compiling rustls-pemfile v1.0.4
   Compiling syn-test-suite-feature-check v0.0.0 (/var/tmp/top100_artifacts/syn-2.0.0/tests/features/macro)
   Compiling serde_urlencoded v0.7.1
   Compiling miniz_oxide v0.8.9
   Compiling regex-automata v0.4.9
   Compiling hyper-tls v0.5.0
   Compiling url v2.5.4
   Compiling xattr v1.5.1
   Compiling ref-cast-impl v1.0.24
   Compiling filetime v0.2.25
   Compiling console v0.15.11
   Compiling encoding_rs v0.8.35
   Compiling either v1.15.0
   Compiling mime v0.3.17
   Compiling sync_wrapper v0.1.2
   Compiling similar v2.7.0
   Compiling ipnet v2.11.0
   Compiling same-file v1.0.6
   Compiling walkdir v2.5.0
   Compiling reqwest v0.11.27
   Compiling insta v1.43.1
   Compiling rayon v1.10.0
   Compiling tar v0.4.44
   Compiling flate2 v1.1.2
   Compiling regex v1.11.1
   Compiling syn-test-suite v0.0.0 (/var/tmp/top100_artifacts/syn-2.0.0/tests/features)
   Compiling automod v1.0.15
warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lib.rs:253:13
    |
253 | #![cfg_attr(doc_cfg, feature(doc_cfg))]
    |             ^^^^^^^
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lib.rs:321:12
    |
321 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lib.rs:357:12
    |
357 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lib.rs:409:5
    |
409 |     doc_cfg,
    |     ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lib.rs:420:12
    |
420 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lib.rs:469:12
    |
469 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "printing"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lib.rs:866:12
    |
866 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "proc-macro"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lib.rs:884:12
    |
884 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lib.rs:911:12
    |
911 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/group.rs:137:12
    |
137 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/group.rs:215:12
    |
215 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/group.rs:270:12
    |
270 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/token.rs:565:12
    |
565 | #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/token.rs:573:12
    |
573 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/token.rs:634:12
    |
634 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/token.rs:638:12
    |
638 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/token.rs:398:24
    |
398 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
560 | / define_punctuation_structs! {
561 | |     "_" pub struct Underscore/1 /// wildcard patterns, inferred types, unnamed items in constants, extern crates, use declarations, and d...
562 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/token.rs:402:24
    |
402 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
560 | / define_punctuation_structs! {
561 | |     "_" pub struct Underscore/1 /// wildcard patterns, inferred types, unnamed items in constants, extern crates, use declarations, and d...
562 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/token.rs:272:24
    |
272 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
730 | / define_keywords! {
731 | |     "abstract"    pub struct Abstract
732 | |     "as"          pub struct As
733 | |     "async"       pub struct Async
...   |
782 | |     "yield"       pub struct Yield
783 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/token.rs:276:24
    |
276 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
730 | / define_keywords! {
731 | |     "abstract"    pub struct Abstract
732 | |     "as"          pub struct As
733 | |     "async"       pub struct Async
...   |
782 | |     "yield"       pub struct Yield
783 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/token.rs:310:24
    |
310 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                          ^^^^^^^
...
730 | / define_keywords! {
731 | |     "abstract"    pub struct Abstract
732 | |     "as"          pub struct As
733 | |     "async"       pub struct Async
...   |
782 | |     "yield"       pub struct Yield
783 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/token.rs:318:24
    |
318 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                          ^^^^^^^
...
730 | / define_keywords! {
731 | |     "abstract"    pub struct Abstract
732 | |     "as"          pub struct As
733 | |     "async"       pub struct Async
...   |
782 | |     "yield"       pub struct Yield
783 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/token.rs:448:24
    |
448 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                          ^^^^^^^
...
785 | / define_punctuation! {
786 | |     "&"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns
787 | |     "&&"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns
788 | |     "&="          pub struct AndEq/2      /// bitwise AND assignment
...   |
831 | |     "~"           pub struct Tilde/1      /// unused since before Rust 1.0
832 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/token.rs:456:24
    |
456 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                          ^^^^^^^
...
785 | / define_punctuation! {
786 | |     "&"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns
787 | |     "&&"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns
788 | |     "&="          pub struct AndEq/2      /// bitwise AND assignment
...   |
831 | |     "~"           pub struct Tilde/1      /// unused since before Rust 1.0
832 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/token.rs:398:24
    |
398 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
785 | / define_punctuation! {
786 | |     "&"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns
787 | |     "&&"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns
788 | |     "&="          pub struct AndEq/2      /// bitwise AND assignment
...   |
831 | |     "~"           pub struct Tilde/1      /// unused since before Rust 1.0
832 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/token.rs:402:24
    |
402 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
785 | / define_punctuation! {
786 | |     "&"           pub struct And/1        /// bitwise and logical AND, borrow, references, reference patterns
787 | |     "&&"          pub struct AndAnd/2     /// lazy AND, borrow, references, reference patterns
788 | |     "&="          pub struct AndEq/2      /// bitwise AND assignment
...   |
831 | |     "~"           pub struct Tilde/1      /// unused since before Rust 1.0
832 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/token.rs:505:24
    |
505 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
834 | / define_delimiters! {
835 | |     Brace         pub struct Brace        /// `{`&hellip;`}`
836 | |     Bracket       pub struct Bracket      /// `[`&hellip;`]`
837 | |     Parenthesis   pub struct Paren        /// `(`&hellip;`)`
838 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_delimiters` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/token.rs:509:24
    |
509 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
834 | / define_delimiters! {
835 | |     Brace         pub struct Brace        /// `{`&hellip;`}`
836 | |     Bracket       pub struct Bracket      /// `[`&hellip;`]`
837 | |     Parenthesis   pub struct Paren        /// `(`&hellip;`)`
838 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_delimiters` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/attr.rs:166:16
    |
166 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/attr.rs:455:16
    |
455 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/attr.rs:483:16
    |
483 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/macros.rs:146:20
    |
146 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: src/attr.rs:462:1
    |
462 | / ast_enum_of_structs! {
463 | |     /// Content of a compile-time structured attribute.
464 | |     ///
465 | |     /// ## Path
...   |
493 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/attr.rs:497:16
    |
497 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/attr.rs:507:16
    |
507 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/attr.rs:215:16
    |
215 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/attr.rs:238:16
    |
238 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/attr.rs:381:16
    |
381 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/attr.rs:396:16
    |
396 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/attr.rs:412:16
    |
412 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/attr.rs:532:16
    |
532 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/attr.rs:539:16
    |
539 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/attr.rs:547:16
    |
547 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/attr.rs:620:16
    |
620 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/attr.rs:628:16
    |
628 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/attr.rs:636:16
    |
636 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/attr.rs:692:16
    |
692 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/attr.rs:705:16
    |
705 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/attr.rs:713:16
    |
713 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/buffer.rs:67:16
   |
67 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "proc-macro")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> src/data.rs:6:16
  |
6 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
  |                ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/data.rs:29:16
   |
29 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/macros.rs:146:20
    |
146 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: src/data.rs:21:1
    |
21  | / ast_enum_of_structs! {
22  | |     /// Data stored within an enum variant or struct.
23  | |     ///
24  | |     /// # Syntax tree enum
...   |
41  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/data.rs:46:16
   |
46 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/data.rs:55:16
   |
55 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/data.rs:137:16
    |
137 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/data.rs:162:16
    |
162 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/data.rs:191:16
    |
191 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/data.rs:202:16
    |
202 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/data.rs:215:20
    |
215 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/data.rs:232:20
    |
232 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/data.rs:253:16
    |
253 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/data.rs:266:16
    |
266 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/data.rs:275:16
    |
275 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/data.rs:284:16
    |
284 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> src/derive.rs:6:16
  |
6 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "derive")))]
  |                ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/derive.rs:24:16
   |
24 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "derive")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/derive.rs:34:16
   |
34 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "derive")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/derive.rs:44:16
   |
44 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "derive")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/derive.rs:54:16
   |
54 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "derive")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/derive.rs:66:16
   |
66 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/derive.rs:202:16
    |
202 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/expr.rs:87:16
   |
87 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/macros.rs:146:20
    |
146 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: src/expr.rs:12:1
    |
12  | / ast_enum_of_structs! {
13  | |     /// A Rust expression.
14  | |     ///
15  | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
240 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:244:16
    |
244 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:254:16
    |
254 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:265:16
    |
265 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:276:16
    |
276 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:287:16
    |
287 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:298:16
    |
298 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:309:16
    |
309 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:320:16
    |
320 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:331:16
    |
331 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:342:16
    |
342 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:369:16
    |
369 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:380:16
    |
380 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:391:16
    |
391 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:409:16
    |
409 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:423:16
    |
423 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:435:16
    |
435 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:454:16
    |
454 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:466:16
    |
466 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:475:16
    |
475 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:486:16
    |
486 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:495:16
    |
495 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:507:16
    |
507 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:521:16
    |
521 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:534:16
    |
534 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:544:16
    |
544 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:555:16
    |
555 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:566:16
    |
566 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:578:16
    |
578 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:591:16
    |
591 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:605:16
    |
605 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:615:16
    |
615 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:625:16
    |
625 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:635:16
    |
635 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:645:16
    |
645 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:655:16
    |
655 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:667:16
    |
667 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:735:16
    |
735 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/expr.rs:802:16
    |
802 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/expr.rs:1024:16
     |
1024 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/expr.rs:1899:16
     |
1899 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/expr.rs:2628:16
     |
2628 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/expr.rs:2642:16
     |
2642 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/expr.rs:2689:16
     |
2689 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/expr.rs:2838:16
     |
2838 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/expr.rs:2872:16
     |
2872 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/expr.rs:2883:16
     |
2883 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/expr.rs:2934:16
     |
2934 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/expr.rs:2992:16
     |
2992 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/expr.rs:3024:16
     |
3024 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/expr.rs:3092:16
     |
3092 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/expr.rs:3102:16
     |
3102 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/expr.rs:3209:16
     |
3209 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/expr.rs:3285:16
     |
3285 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/expr.rs:3303:16
     |
3303 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:286:5
    |
286 |     doc_cfg,
    |     ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:294:5
    |
294 |     doc_cfg,
    |     ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:302:5
    |
302 |     doc_cfg,
    |     ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/generics.rs:19:16
   |
19 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/generics.rs:37:16
   |
37 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/macros.rs:146:20
    |
146 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: src/generics.rs:28:1
    |
28  | / ast_enum_of_structs! {
29  | |     /// A generic type parameter, lifetime, or const generic: `T: Into<String>`,
30  | |     /// `'a: 'b`, `const LEN: usize`.
31  | |     ///
...   |
48  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/generics.rs:52:16
   |
52 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/generics.rs:63:16
   |
63 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/generics.rs:76:16
   |
76 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:344:20
    |
344 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
385 | generics_wrapper_impls!(ImplGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:344:20
    |
344 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
387 | generics_wrapper_impls!(TypeGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:344:20
    |
344 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
389 | generics_wrapper_impls!(Turbofish);
    | ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:401:16
    |
401 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:447:16
    |
447 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/macros.rs:146:20
    |
146 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: src/generics.rs:445:1
    |
445 | / ast_enum_of_structs! {
446 | |     /// A trait or lifetime used as a bound on a type parameter.
447 | |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
448 | |     #[non_exhaustive]
...   |
454 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:458:16
    |
458 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:472:16
    |
472 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:482:16
    |
482 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:497:16
    |
497 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/macros.rs:146:20
    |
146 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: src/generics.rs:489:1
    |
489 | / ast_enum_of_structs! {
490 | |     /// A single predicate in a `where` clause: `T: Deserialize<'de>`.
491 | |     ///
492 | |     /// # Syntax tree enum
...   |
506 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:510:16
    |
510 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:520:16
    |
520 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:328:9
    |
328 |         doc_cfg,
    |         ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:538:16
    |
538 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:601:16
    |
601 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:628:16
    |
628 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:666:16
    |
666 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:695:16
    |
695 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:706:16
    |
706 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:747:16
    |
747 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:807:16
    |
807 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:832:16
    |
832 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:843:16
    |
843 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:867:16
    |
867 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:898:16
    |
898 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:909:16
    |
909 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/generics.rs:980:16
    |
980 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/generics.rs:1121:16
     |
1121 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/generics.rs:1131:16
     |
1131 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/generics.rs:1143:16
     |
1143 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/generics.rs:1159:16
     |
1159 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/generics.rs:1174:16
     |
1174 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/generics.rs:1184:16
     |
1184 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/generics.rs:1199:16
     |
1199 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/generics.rs:1209:16
     |
1209 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/generics.rs:1218:16
     |
1218 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/ident.rs:73:16
   |
73 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lifetime.rs:127:16
    |
127 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lifetime.rs:145:16
    |
145 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:685:12
    |
685 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:696:12
    |
696 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:708:12
    |
708 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/macros.rs:146:20
    |
146 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: src/lit.rs:14:1
    |
14  | / ast_enum_of_structs! {
15  | |     /// A Rust literal such as a string or integer or boolean.
16  | |     ///
17  | |     /// # Syntax tree enum
...   |
50  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:722:20
    |
722 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
759 | lit_extra_traits!(LitStr);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:722:20
    |
722 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
760 | lit_extra_traits!(LitByteStr);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:722:20
    |
722 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
761 | lit_extra_traits!(LitByte);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:722:20
    |
722 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
762 | lit_extra_traits!(LitChar);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:722:20
    |
722 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
763 | lit_extra_traits!(LitInt);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:722:20
    |
722 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
764 | lit_extra_traits!(LitFloat);
    | --------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:171:16
    |
171 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:201:16
    |
201 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:800:16
    |
800 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:871:16
    |
871 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:882:16
    |
882 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:893:16
    |
893 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:904:16
    |
904 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:915:16
    |
915 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:926:16
    |
926 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:937:16
    |
937 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:955:16
    |
955 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:962:16
    |
962 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:969:16
    |
969 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:976:16
    |
976 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:983:16
    |
983 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:990:16
    |
990 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/lit.rs:997:16
    |
997 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/mac.rs:15:16
   |
15 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/mac.rs:26:16
   |
26 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/mac.rs:128:16
    |
128 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/mac.rs:136:16
    |
136 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/mac.rs:168:16
    |
168 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/mac.rs:203:16
    |
203 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> src/op.rs:3:16
  |
3 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
  |                ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/op.rs:67:16
   |
67 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/op.rs:126:16
    |
126 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/op.rs:161:16
    |
161 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/op.rs:184:16
    |
184 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/op.rs:220:16
    |
220 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/parse.rs:1114:12
     |
1114 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/parse.rs:1121:12
     |
1121 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/parse.rs:1132:12
     |
1132 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/parse.rs:1139:12
     |
1139 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/parse.rs:1149:12
     |
1149 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/parse.rs:1163:12
     |
1163 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/parse.rs:1173:12
     |
1173 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/parse.rs:1205:16
     |
1205 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "proc-macro")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/parse_macro_input.rs:107:12
    |
107 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "proc-macro"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/parse_quote.rs:67:12
   |
67 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "printing"))))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/parse_quote.rs:99:12
   |
99 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "printing"))))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> src/path.rs:6:16
  |
6 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
  |                ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/path.rs:88:16
   |
88 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:117:16
    |
117 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:152:16
    |
152 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:178:16
    |
178 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:190:16
    |
190 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:202:16
    |
202 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:213:16
    |
213 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:225:16
    |
225 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:252:16
    |
252 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:269:16
    |
269 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:276:16
    |
276 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:439:16
    |
439 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:447:16
    |
447 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:459:16
    |
459 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:527:20
    |
527 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:650:16
    |
650 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:658:16
    |
658 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:666:16
    |
666 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:681:16
    |
681 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:707:16
    |
707 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:750:16
    |
750 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:760:16
    |
760 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:770:16
    |
770 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/path.rs:780:16
    |
780 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/punctuated.rs:348:12
    |
348 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/punctuated.rs:992:12
    |
992 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/punctuated.rs:1007:12
     |
1007 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/punctuated.rs:1022:12
     |
1022 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/punctuated.rs:253:16
    |
253 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/punctuated.rs:271:16
    |
271 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/punctuated.rs:305:16
    |
305 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/punctuated.rs:323:16
    |
323 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/punctuated.rs:1064:16
     |
1064 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/punctuated.rs:1075:16
     |
1075 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/restriction.rs:12:16
   |
12 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/restriction.rs:29:16
   |
29 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/restriction.rs:40:16
   |
40 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/restriction.rs:65:16
   |
65 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/restriction.rs:148:16
    |
148 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/restriction.rs:159:16
    |
159 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/ty.rs:13:16
   |
13 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/macros.rs:146:20
    |
146 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: src/ty.rs:5:1
    |
5   | / ast_enum_of_structs! {
6   | |     /// The possible types that a Rust value could have.
7   | |     ///
8   | |     /// # Syntax tree enum
...   |
81  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/ty.rs:85:16
   |
85 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/ty.rs:96:16
   |
96 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:111:16
    |
111 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:121:16
    |
121 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:130:16
    |
130 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:138:16
    |
138 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:146:16
    |
146 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:154:16
    |
154 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:164:16
    |
164 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:173:16
    |
173 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:184:16
    |
184 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:195:16
    |
195 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:205:16
    |
205 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:214:16
    |
214 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:223:16
    |
223 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:232:16
    |
232 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:242:16
    |
242 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:253:16
    |
253 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:272:16
    |
272 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:581:16
    |
581 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:592:16
    |
592 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:605:16
    |
605 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:628:16
    |
628 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:641:16
    |
641 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:688:16
    |
688 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:697:16
    |
697 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:706:16
    |
706 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:739:16
    |
739 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:748:16
    |
748 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:776:16
    |
776 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:784:16
    |
784 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:838:16
    |
838 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:881:16
    |
881 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:892:16
    |
892 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:913:16
    |
913 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:981:16
    |
981 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:991:16
    |
991 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:287:20
    |
287 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:758:20
    |
758 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:793:20
    |
793 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/ty.rs:847:20
    |
847 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/ty.rs:1011:16
     |
1011 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/ty.rs:1020:16
     |
1020 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/ty.rs:1031:16
     |
1031 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/ty.rs:1045:16
     |
1045 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/ty.rs:1055:16
     |
1055 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/ty.rs:1076:16
     |
1076 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/ty.rs:1083:16
     |
1083 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/ty.rs:1092:16
     |
1092 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/ty.rs:1099:16
     |
1099 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/ty.rs:1107:16
     |
1107 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/ty.rs:1115:16
     |
1115 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/ty.rs:1124:16
     |
1124 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/ty.rs:1133:16
     |
1133 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/ty.rs:1140:16
     |
1140 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/ty.rs:1147:16
     |
1147 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/ty.rs:1160:16
     |
1160 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/ty.rs:1172:16
     |
1172 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/ty.rs:1185:16
     |
1185 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> src/gen/clone.rs:7:12
  |
7 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
  |            ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/gen/clone.rs:17:12
   |
17 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/gen/clone.rs:43:12
   |
43 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/gen/clone.rs:55:12
   |
55 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/gen/clone.rs:67:12
   |
67 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/gen/clone.rs:70:12
   |
70 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/gen/clone.rs:77:12
   |
77 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> src/gen/clone.rs:89:12
   |
89 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:100:12
    |
100 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:112:12
    |
112 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:115:12
    |
115 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:132:12
    |
132 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:144:12
    |
144 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:159:12
    |
159 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:171:12
    |
171 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:182:12
    |
182 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:193:12
    |
193 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:204:12
    |
204 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:214:12
    |
214 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:227:12
    |
227 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:352:12
    |
352 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:387:12
    |
387 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:399:12
    |
399 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:452:12
    |
452 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:503:12
    |
503 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:538:12
    |
538 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:598:12
    |
598 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:609:12
    |
609 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:716:12
    |
716 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:762:12
    |
762 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:776:12
    |
776 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:809:12
    |
809 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:820:12
    |
820 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:830:12
    |
830 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:927:12
    |
927 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:941:12
    |
941 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> src/gen/clone.rs:952:12
    |
952 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1044:12
     |
1044 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1318:12
     |
1318 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1329:12
     |
1329 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1344:12
     |
1344 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1378:12
     |
1378 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1390:12
     |
1390 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1401:12
     |
1401 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1411:12
     |
1411 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1422:12
     |
1422 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1433:12
     |
1433 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1444:12
     |
1444 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1608:12
     |
1608 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1618:12
     |
1618 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1631:12
     |
1631 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1641:12
     |
1641 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1652:12
     |
1652 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1664:12
     |
1664 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1701:12
     |
1701 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1763:12
     |
1763 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1775:12
     |
1775 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1778:12
     |
1778 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1853:12
     |
1853 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1876:12
     |
1876 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1888:12
     |
1888 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1904:12
     |
1904 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1914:12
     |
1914 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1924:12
     |
1924 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1933:12
     |
1933 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1940:12
     |
1940 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1949:12
     |
1949 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1963:12
     |
1963 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1974:12
     |
1974 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1984:12
     |
1984 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:1994:12
     |
1994 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:2006:12
     |
2006 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:2018:12
     |
2018 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:2028:12
     |
2028 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:2038:12
     |
2038 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:2048:12
     |
2048 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:2051:12
     |
2051 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:2133:12
     |
2133 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:2145:12
     |
2145 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:2157:12
     |
2157 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:2168:12
     |
2168 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> src/gen/clone.rs:2178:12
     |
2178 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `crate::gen::*`
   --> src/lib.rs:816:9
    |
816 | pub use crate::gen::*;
    |         ^^^^^^^^^^^^^
    |
    = note: `#[warn(unused_imports)]` on by default

warning: method `inner` is never used
   --> src/attr.rs:560:8
    |
556 | pub(crate) trait FilterAttrs<'a> {
    |                  ----------- method in this trait
...
560 |     fn inner(self) -> Self::Ret;
    |        ^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: field `0` is never read
   --> src/expr.rs:975:35
    |
975 |     pub(crate) struct AllowStruct(bool);
    |                       ----------- ^^^^
    |                       |
    |                       field in this struct
    |
    = help: consider removing this field

warning: `syn` (lib test) generated 503 warnings (503 duplicates)
warning: `syn` (lib) generated 503 warnings (90 duplicates) (run `cargo fix --lib -p syn` to apply 1 suggestion)
warning: unexpected `cfg` condition name: `syn_disable_nightly_tests`
 --> tests/test_precedence.rs:1:12
  |
1 | #![cfg(not(syn_disable_nightly_tests))]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_disable_nightly_tests)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_disable_nightly_tests)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default

error[E0432]: unresolved imports `syn::Item`, `syn::ItemTrait`
   --> tests/test_item.rs:8:11
    |
8   | use syn::{Item, ItemTrait};
    |           ^^^^  ^^^^^^^^^ no `ItemTrait` in the root
    |           |
    |           no `Item` in the root
    |
note: found an item that was configured out
   --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:88
    |
384 |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
    |                                                                                        ^^^^
note: the item is gated behind the `full` feature
   --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
    |
381 | #[cfg(feature = "full")]
    |       ^^^^^^^^^^^^^^^^
note: found an item that was configured out
   --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:386:29
    |
386 |     ItemStatic, ItemStruct, ItemTrait, ItemTraitAlias, ItemType, ItemUnion, ItemUse, Receiver,
    |                             ^^^^^^^^^
note: the item is gated behind the `full` feature
   --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
    |
381 | #[cfg(feature = "full")]
    |       ^^^^^^^^^^^^^^^^

warning: `syn` (test "test_precedence") generated 1 warning
error[E0433]: failed to resolve: could not find `FnArg` in `syn`
    --> tests/macros/../debug/gen.rs:1847:18
     |
1847 |             syn::FnArg::Receiver(_val) => {
     |                  ^^^^^ could not find `FnArg` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:383:5
     |
383  |     FnArg, ForeignItem, ForeignItemFn, ForeignItemMacro, ForeignItemStatic, ForeignItemType,
     |     ^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `FnArg` in `syn`
    --> tests/macros/../debug/gen.rs:1854:18
     |
1854 |             syn::FnArg::Typed(_val) => {
     |                  ^^^^^ could not find `FnArg` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:383:5
     |
383  |     FnArg, ForeignItem, ForeignItemFn, ForeignItemMacro, ForeignItemStatic, ForeignItemType,
     |     ^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `ForeignItem` in `syn`
    --> tests/macros/../debug/gen.rs:1867:18
     |
1867 |             syn::ForeignItem::Fn(_val) => {
     |                  ^^^^^^^^^^^ could not find `ForeignItem` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:383:12
     |
383  |     FnArg, ForeignItem, ForeignItemFn, ForeignItemMacro, ForeignItemStatic, ForeignItemType,
     |            ^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `ForeignItem` in `syn`
    --> tests/macros/../debug/gen.rs:1876:18
     |
1876 |             syn::ForeignItem::Static(_val) => {
     |                  ^^^^^^^^^^^ could not find `ForeignItem` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:383:12
     |
383  |     FnArg, ForeignItem, ForeignItemFn, ForeignItemMacro, ForeignItemStatic, ForeignItemType,
     |            ^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `StaticMutability` in `syn`
    --> tests/macros/../debug/gen.rs:1883:26
     |
1883 |                     syn::StaticMutability::None => {}
     |                          ^^^^^^^^^^^^^^^^ could not find `StaticMutability` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:387:16
     |
387  |     Signature, StaticMutability, TraitItem, TraitItemConst, TraitItemFn, TraitItemMacro,
     |                ^^^^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `ForeignItem` in `syn`
    --> tests/macros/../debug/gen.rs:1892:18
     |
1892 |             syn::ForeignItem::Type(_val) => {
     |                  ^^^^^^^^^^^ could not find `ForeignItem` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:383:12
     |
383  |     FnArg, ForeignItem, ForeignItemFn, ForeignItemMacro, ForeignItemStatic, ForeignItemType,
     |            ^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `ForeignItem` in `syn`
    --> tests/macros/../debug/gen.rs:1902:18
     |
1902 |             syn::ForeignItem::Macro(_val) => {
     |                  ^^^^^^^^^^^ could not find `ForeignItem` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:383:12
     |
383  |     FnArg, ForeignItem, ForeignItemFn, ForeignItemMacro, ForeignItemStatic, ForeignItemType,
     |            ^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `ForeignItem` in `syn`
    --> tests/macros/../debug/gen.rs:1913:18
     |
1913 |             syn::ForeignItem::Verbatim(_val) => {
     |                  ^^^^^^^^^^^ could not find `ForeignItem` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:383:12
     |
383  |     FnArg, ForeignItem, ForeignItemFn, ForeignItemMacro, ForeignItemStatic, ForeignItemType,
     |            ^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `StaticMutability` in `syn`
    --> tests/macros/../debug/gen.rs:1956:18
     |
1956 |             syn::StaticMutability::None => {}
     |                  ^^^^^^^^^^^^^^^^ could not find `StaticMutability` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:387:16
     |
387  |     Signature, StaticMutability, TraitItem, TraitItemConst, TraitItemFn, TraitItemMacro,
     |                ^^^^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `ImplItem` in `syn`
    --> tests/macros/../debug/gen.rs:2086:18
     |
2086 |             syn::ImplItem::Const(_val) => {
     |                  ^^^^^^^^ could not find `ImplItem` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:5
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |     ^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `ImplItem` in `syn`
    --> tests/macros/../debug/gen.rs:2101:18
     |
2101 |             syn::ImplItem::Fn(_val) => {
     |                  ^^^^^^^^ could not find `ImplItem` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:5
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |     ^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `ImplItem` in `syn`
    --> tests/macros/../debug/gen.rs:2114:18
     |
2114 |             syn::ImplItem::Type(_val) => {
     |                  ^^^^^^^^ could not find `ImplItem` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:5
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |     ^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `ImplItem` in `syn`
    --> tests/macros/../debug/gen.rs:2128:18
     |
2128 |             syn::ImplItem::Macro(_val) => {
     |                  ^^^^^^^^ could not find `ImplItem` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:5
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |     ^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `ImplItem` in `syn`
    --> tests/macros/../debug/gen.rs:2139:18
     |
2139 |             syn::ImplItem::Verbatim(_val) => {
     |                  ^^^^^^^^ could not find `ImplItem` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:5
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |     ^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Item` in `syn`
    --> tests/macros/../debug/gen.rs:2226:18
     |
2226 |             syn::Item::Const(_val) => {
     |                  ^^^^ could not find `Item` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:88
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                                                        ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Item` in `syn`
    --> tests/macros/../debug/gen.rs:2238:18
     |
2238 |             syn::Item::Enum(_val) => {
     |                  ^^^^ could not find `Item` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:88
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                                                        ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Item` in `syn`
    --> tests/macros/../debug/gen.rs:2251:18
     |
2251 |             syn::Item::ExternCrate(_val) => {
     |                  ^^^^ could not find `Item` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:88
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                                                        ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Item` in `syn`
    --> tests/macros/../debug/gen.rs:2274:18
     |
2274 |             syn::Item::Fn(_val) => {
     |                  ^^^^ could not find `Item` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:88
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                                                        ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Item` in `syn`
    --> tests/macros/../debug/gen.rs:2284:18
     |
2284 |             syn::Item::ForeignMod(_val) => {
     |                  ^^^^ could not find `Item` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:88
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                                                        ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Item` in `syn`
    --> tests/macros/../debug/gen.rs:2298:18
     |
2298 |             syn::Item::Impl(_val) => {
     |                  ^^^^ could not find `Item` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:88
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                                                        ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Item` in `syn`
    --> tests/macros/../debug/gen.rs:2338:18
     |
2338 |             syn::Item::Macro(_val) => {
     |                  ^^^^ could not find `Item` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:88
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                                                        ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Item` in `syn`
    --> tests/macros/../debug/gen.rs:2363:18
     |
2363 |             syn::Item::Mod(_val) => {
     |                  ^^^^ could not find `Item` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:88
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                                                        ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Item` in `syn`
    --> tests/macros/../debug/gen.rs:2392:18
     |
2392 |             syn::Item::Static(_val) => {
     |                  ^^^^ could not find `Item` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:88
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                                                        ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `StaticMutability` in `syn`
    --> tests/macros/../debug/gen.rs:2399:26
     |
2399 |                     syn::StaticMutability::None => {}
     |                          ^^^^^^^^^^^^^^^^ could not find `StaticMutability` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:387:16
     |
387  |     Signature, StaticMutability, TraitItem, TraitItemConst, TraitItemFn, TraitItemMacro,
     |                ^^^^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Item` in `syn`
    --> tests/macros/../debug/gen.rs:2409:18
     |
2409 |             syn::Item::Struct(_val) => {
     |                  ^^^^ could not find `Item` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:88
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                                                        ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Item` in `syn`
    --> tests/macros/../debug/gen.rs:2423:18
     |
2423 |             syn::Item::Trait(_val) => {
     |                  ^^^^ could not find `Item` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:88
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                                                        ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Item` in `syn`
    --> tests/macros/../debug/gen.rs:2462:18
     |
2462 |             syn::Item::TraitAlias(_val) => {
     |                  ^^^^ could not find `Item` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:88
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                                                        ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Item` in `syn`
    --> tests/macros/../debug/gen.rs:2475:18
     |
2475 |             syn::Item::Type(_val) => {
     |                  ^^^^ could not find `Item` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:88
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                                                        ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Item` in `syn`
    --> tests/macros/../debug/gen.rs:2486:18
     |
2486 |             syn::Item::Union(_val) => {
     |                  ^^^^ could not find `Item` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:88
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                                                        ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Item` in `syn`
    --> tests/macros/../debug/gen.rs:2497:18
     |
2497 |             syn::Item::Use(_val) => {
     |                  ^^^^ could not find `Item` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:88
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                                                        ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0432]: unresolved import `syn::Stmt`
   --> tests/test_stmt.rs:12:5
    |
12  | use syn::Stmt;
    |     ^^^^^^^^^ no `Stmt` in the root
    |
note: found an item that was configured out
   --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:475:48
    |
475 | pub use crate::stmt::{Block, Local, LocalInit, Stmt, StmtMacro};
    |                                                ^^^^
note: the item is gated behind the `full` feature
   --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:474:7
    |
474 | #[cfg(feature = "full")]
    |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Item` in `syn`
    --> tests/macros/../debug/gen.rs:2509:18
     |
2509 |             syn::Item::Verbatim(_val) => {
     |                  ^^^^ could not find `Item` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:88
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                                                        ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `StaticMutability` in `syn`
    --> tests/macros/../debug/gen.rs:2710:18
     |
2710 |             syn::StaticMutability::None => {}
     |                  ^^^^^^^^^^^^^^^^ could not find `StaticMutability` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:387:16
     |
387  |     Signature, StaticMutability, TraitItem, TraitItemConst, TraitItemFn, TraitItemMacro,
     |                ^^^^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Pat` in `syn`
    --> tests/macros/../debug/gen.rs:3076:18
     |
3076 |             syn::Pat::Const(_val) => {
     |                  ^^^
     |                  |
     |                  could not find `Pat` in `syn`
     |                  help: a struct with a similar name exists: `Path`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:15
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |               ^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Pat` in `syn`
    --> tests/macros/../debug/gen.rs:3083:18
     |
3083 |             syn::Pat::Ident(_val) => {
     |                  ^^^
     |                  |
     |                  could not find `Pat` in `syn`
     |                  help: a struct with a similar name exists: `Path`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:15
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |               ^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Pat` in `syn`
    --> tests/macros/../debug/gen.rs:3111:18
     |
3111 |             syn::Pat::Lit(_val) => {
     |                  ^^^
     |                  |
     |                  could not find `Pat` in `syn`
     |                  help: a struct with a similar name exists: `Path`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:15
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |               ^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Pat` in `syn`
    --> tests/macros/../debug/gen.rs:3118:18
     |
3118 |             syn::Pat::Macro(_val) => {
     |                  ^^^
     |                  |
     |                  could not find `Pat` in `syn`
     |                  help: a struct with a similar name exists: `Path`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:15
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |               ^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Pat` in `syn`
    --> tests/macros/../debug/gen.rs:3125:18
     |
3125 |             syn::Pat::Or(_val) => {
     |                  ^^^
     |                  |
     |                  could not find `Pat` in `syn`
     |                  help: a struct with a similar name exists: `Path`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:15
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |               ^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Pat` in `syn`
    --> tests/macros/../debug/gen.rs:3138:18
     |
3138 |             syn::Pat::Paren(_val) => {
     |                  ^^^
     |                  |
     |                  could not find `Pat` in `syn`
     |                  help: a struct with a similar name exists: `Path`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:15
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |               ^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Pat` in `syn`
    --> tests/macros/../debug/gen.rs:3146:18
     |
3146 |             syn::Pat::Path(_val) => {
     |                  ^^^ could not find `Pat` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:15
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |               ^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Pat` in `syn`
    --> tests/macros/../debug/gen.rs:3153:18
     |
3153 |             syn::Pat::Range(_val) => {
     |                  ^^^
     |                  |
     |                  could not find `Pat` in `syn`
     |                  help: a struct with a similar name exists: `Path`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:15
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |               ^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Pat` in `syn`
    --> tests/macros/../debug/gen.rs:3160:18
     |
3160 |             syn::Pat::Reference(_val) => {
     |                  ^^^
     |                  |
     |                  could not find `Pat` in `syn`
     |                  help: a struct with a similar name exists: `Path`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:15
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |               ^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Pat` in `syn`
    --> tests/macros/../debug/gen.rs:3171:18
     |
3171 |             syn::Pat::Rest(_val) => {
     |                  ^^^
     |                  |
     |                  could not find `Pat` in `syn`
     |                  help: a struct with a similar name exists: `Path`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:15
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |               ^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Pat` in `syn`
    --> tests/macros/../debug/gen.rs:3178:18
     |
3178 |             syn::Pat::Slice(_val) => {
     |                  ^^^
     |                  |
     |                  could not find `Pat` in `syn`
     |                  help: a struct with a similar name exists: `Path`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:15
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |               ^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Pat` in `syn`
    --> tests/macros/../debug/gen.rs:3188:18
     |
3188 |             syn::Pat::Struct(_val) => {
     |                  ^^^
     |                  |
     |                  could not find `Pat` in `syn`
     |                  help: a struct with a similar name exists: `Path`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:15
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |               ^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Pat` in `syn`
    --> tests/macros/../debug/gen.rs:3227:18
     |
3227 |             syn::Pat::Tuple(_val) => {
     |                  ^^^
     |                  |
     |                  could not find `Pat` in `syn`
     |                  help: a struct with a similar name exists: `Path`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:15
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |               ^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Pat` in `syn`
    --> tests/macros/../debug/gen.rs:3237:18
     |
3237 |             syn::Pat::TupleStruct(_val) => {
     |                  ^^^
     |                  |
     |                  could not find `Pat` in `syn`
     |                  help: a struct with a similar name exists: `Path`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:15
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |               ^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Pat` in `syn`
    --> tests/macros/../debug/gen.rs:3262:18
     |
3262 |             syn::Pat::Type(_val) => {
     |                  ^^^
     |                  |
     |                  could not find `Pat` in `syn`
     |                  help: a struct with a similar name exists: `Path`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:15
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |               ^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Pat` in `syn`
    --> tests/macros/../debug/gen.rs:3271:18
     |
3271 |             syn::Pat::Verbatim(_val) => {
     |                  ^^^
     |                  |
     |                  could not find `Pat` in `syn`
     |                  help: a struct with a similar name exists: `Path`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:15
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |               ^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Pat` in `syn`
    --> tests/macros/../debug/gen.rs:3278:18
     |
3278 |             syn::Pat::Wild(_val) => {
     |                  ^^^
     |                  |
     |                  could not find `Pat` in `syn`
     |                  help: a struct with a similar name exists: `Path`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:15
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |               ^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `RangeLimits` in `syn`
    --> tests/macros/../debug/gen.rs:3578:18
     |
3578 |             syn::RangeLimits::HalfOpen(_val) => {
     |                  ^^^^^^^^^^^ could not find `RangeLimits` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:346:47
     |
346  | pub use crate::expr::{Arm, FieldValue, Label, RangeLimits};
     |                                               ^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:345:7
     |
345  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `RangeLimits` in `syn`
    --> tests/macros/../debug/gen.rs:3582:18
     |
3582 |             syn::RangeLimits::Closed(_val) => {
     |                  ^^^^^^^^^^^ could not find `RangeLimits` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:346:47
     |
346  | pub use crate::expr::{Arm, FieldValue, Label, RangeLimits};
     |                                               ^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:345:7
     |
345  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `StaticMutability` in `syn`
    --> tests/macros/../debug/gen.rs:3707:18
     |
3707 |             syn::StaticMutability::Mut(_val) => {
     |                  ^^^^^^^^^^^^^^^^ could not find `StaticMutability` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:387:16
     |
387  |     Signature, StaticMutability, TraitItem, TraitItemConst, TraitItemFn, TraitItemMacro,
     |                ^^^^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `StaticMutability` in `syn`
    --> tests/macros/../debug/gen.rs:3711:18
     |
3711 |             syn::StaticMutability::None => formatter.write_str("StaticMutability::None"),
     |                  ^^^^^^^^^^^^^^^^ could not find `StaticMutability` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:387:16
     |
387  |     Signature, StaticMutability, TraitItem, TraitItemConst, TraitItemFn, TraitItemMacro,
     |                ^^^^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Stmt` in `syn`
    --> tests/macros/../debug/gen.rs:3719:18
     |
3719 |             syn::Stmt::Local(_val) => {
     |                  ^^^^ could not find `Stmt` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:475:48
     |
475  | pub use crate::stmt::{Block, Local, LocalInit, Stmt, StmtMacro};
     |                                                ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:474:7
     |
474  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Stmt` in `syn`
    --> tests/macros/../debug/gen.rs:3741:18
     |
3741 |             syn::Stmt::Item(_val) => {
     |                  ^^^^ could not find `Stmt` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:475:48
     |
475  | pub use crate::stmt::{Block, Local, LocalInit, Stmt, StmtMacro};
     |                                                ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:474:7
     |
474  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Stmt` in `syn`
    --> tests/macros/../debug/gen.rs:3748:18
     |
3748 |             syn::Stmt::Expr(_v0, _v1) => {
     |                  ^^^^ could not find `Stmt` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:475:48
     |
475  | pub use crate::stmt::{Block, Local, LocalInit, Stmt, StmtMacro};
     |                                                ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:474:7
     |
474  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `Stmt` in `syn`
    --> tests/macros/../debug/gen.rs:3759:18
     |
3759 |             syn::Stmt::Macro(_val) => {
     |                  ^^^^ could not find `Stmt` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:475:48
     |
475  | pub use crate::stmt::{Block, Local, LocalInit, Stmt, StmtMacro};
     |                                                ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:474:7
     |
474  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `TraitItem` in `syn`
    --> tests/macros/../debug/gen.rs:3832:18
     |
3832 |             syn::TraitItem::Const(_val) => {
     |                  ^^^^^^^^^ could not find `TraitItem` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:387:34
     |
387  |     Signature, StaticMutability, TraitItem, TraitItemConst, TraitItemFn, TraitItemMacro,
     |                                  ^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `TraitItem` in `syn`
    --> tests/macros/../debug/gen.rs:3856:18
     |
3856 |             syn::TraitItem::Fn(_val) => {
     |                  ^^^^^^^^^ could not find `TraitItem` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:387:34
     |
387  |     Signature, StaticMutability, TraitItem, TraitItemConst, TraitItemFn, TraitItemMacro,
     |                                  ^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `TraitItem` in `syn`
    --> tests/macros/../debug/gen.rs:3881:18
     |
3881 |             syn::TraitItem::Type(_val) => {
     |                  ^^^^^^^^^ could not find `TraitItem` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:387:34
     |
387  |     Signature, StaticMutability, TraitItem, TraitItemConst, TraitItemFn, TraitItemMacro,
     |                                  ^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `TraitItem` in `syn`
    --> tests/macros/../debug/gen.rs:3910:18
     |
3910 |             syn::TraitItem::Macro(_val) => {
     |                  ^^^^^^^^^ could not find `TraitItem` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:387:34
     |
387  |     Signature, StaticMutability, TraitItem, TraitItemConst, TraitItemFn, TraitItemMacro,
     |                                  ^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `TraitItem` in `syn`
    --> tests/macros/../debug/gen.rs:3921:18
     |
3921 |             syn::TraitItem::Verbatim(_val) => {
     |                  ^^^^^^^^^ could not find `TraitItem` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:387:34
     |
387  |     Signature, StaticMutability, TraitItem, TraitItemConst, TraitItemFn, TraitItemMacro,
     |                                  ^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `UseTree` in `syn`
    --> tests/macros/../debug/gen.rs:4516:18
     |
4516 |             syn::UseTree::Path(_val) => {
     |                  ^^^^^^^ could not find `UseTree` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:388:68
     |
388  |     TraitItemType, UseGlob, UseGroup, UseName, UsePath, UseRename, UseTree, Variadic,
     |                                                                    ^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `UseTree` in `syn`
    --> tests/macros/../debug/gen.rs:4523:18
     |
4523 |             syn::UseTree::Name(_val) => {
     |                  ^^^^^^^ could not find `UseTree` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:388:68
     |
388  |     TraitItemType, UseGlob, UseGroup, UseName, UsePath, UseRename, UseTree, Variadic,
     |                                                                    ^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `UseTree` in `syn`
    --> tests/macros/../debug/gen.rs:4530:18
     |
4530 |             syn::UseTree::Rename(_val) => {
     |                  ^^^^^^^ could not find `UseTree` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:388:68
     |
388  |     TraitItemType, UseGlob, UseGroup, UseName, UsePath, UseRename, UseTree, Variadic,
     |                                                                    ^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `UseTree` in `syn`
    --> tests/macros/../debug/gen.rs:4537:18
     |
4537 |             syn::UseTree::Glob(_val) => {
     |                  ^^^^^^^ could not find `UseTree` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:388:68
     |
388  |     TraitItemType, UseGlob, UseGroup, UseName, UsePath, UseRename, UseTree, Variadic,
     |                                                                    ^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: could not find `UseTree` in `syn`
    --> tests/macros/../debug/gen.rs:4544:18
     |
4544 |             syn::UseTree::Group(_val) => {
     |                  ^^^^^^^ could not find `UseTree` in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:388:68
     |
388  |     TraitItemType, UseGlob, UseGroup, UseName, UsePath, UseRename, UseTree, Variadic,
     |                                                                    ^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Arm` in crate `syn`
   --> tests/macros/../debug/gen.rs:40:26
    |
40  | impl Debug for Lite<syn::Arm> {
    |                          ^^^ not found in `syn`
    |
note: found an item that was configured out
   --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:346:23
    |
346 | pub use crate::expr::{Arm, FieldValue, Label, RangeLimits};
    |                       ^^^
note: the item is gated behind the `full` feature
   --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:345:7
    |
345 | #[cfg(feature = "full")]
    |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Block` in crate `syn`
   --> tests/macros/../debug/gen.rs:300:26
    |
300 | impl Debug for Lite<syn::Block> {
    |                          ^^^^^ not found in `syn`
    |
note: found an item that was configured out
   --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:475:23
    |
475 | pub use crate::stmt::{Block, Local, LocalInit, Stmt, StmtMacro};
    |                       ^^^^^
note: the item is gated behind the `full` feature
   --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:474:7
    |
474 | #[cfg(feature = "full")]
    |       ^^^^^^^^^^^^^^^^
help: there is an enum variant `syn::Expr::Block` and 1 other; try using the variant's enum
    |
300 - impl Debug for Lite<syn::Block> {
300 + impl Debug for Lite<syn::Expr> {
    |
300 - impl Debug for Lite<syn::Block> {
300 + impl Debug for Lite<tar::EntryType> {
    |

error[E0412]: cannot find type `Label` in crate `syn`
   --> tests/macros/../debug/gen.rs:494:39
    |
494 |                     struct Print(syn::Label);
    |                                       ^^^^^ not found in `syn`
    |
note: found an item that was configured out
   --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:346:40
    |
346 | pub use crate::expr::{Arm, FieldValue, Label, RangeLimits};
    |                                        ^^^^^
note: the item is gated behind the `full` feature
   --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:345:7
    |
345 | #[cfg(feature = "full")]
    |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Label` in crate `syn`
   --> tests/macros/../debug/gen.rs:647:39
    |
647 |                     struct Print(syn::Label);
    |                                       ^^^^^ not found in `syn`
    |
note: found an item that was configured out
   --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:346:40
    |
346 | pub use crate::expr::{Arm, FieldValue, Label, RangeLimits};
    |                                        ^^^^^
note: the item is gated behind the `full` feature
   --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:345:7
    |
345 | #[cfg(feature = "full")]
    |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Label` in crate `syn`
   --> tests/macros/../debug/gen.rs:735:39
    |
735 |                     struct Print(syn::Label);
    |                                       ^^^^^ not found in `syn`
    |
note: found an item that was configured out
   --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:346:40
    |
346 | pub use crate::expr::{Arm, FieldValue, Label, RangeLimits};
    |                                        ^^^^^
note: the item is gated behind the `full` feature
   --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:345:7
    |
345 | #[cfg(feature = "full")]
    |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Label` in crate `syn`
    --> tests/macros/../debug/gen.rs:1001:39
     |
1001 |                     struct Print(syn::Label);
     |                                       ^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:346:40
     |
346  | pub use crate::expr::{Arm, FieldValue, Label, RangeLimits};
     |                                        ^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:345:7
     |
345  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Label` in crate `syn`
    --> tests/macros/../debug/gen.rs:1108:31
     |
1108 |             struct Print(syn::Label);
     |                               ^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:346:40
     |
346  | pub use crate::expr::{Arm, FieldValue, Label, RangeLimits};
     |                                        ^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:345:7
     |
345  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Label` in crate `syn`
    --> tests/macros/../debug/gen.rs:1277:31
     |
1277 |             struct Print(syn::Label);
     |                               ^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:346:40
     |
346  | pub use crate::expr::{Arm, FieldValue, Label, RangeLimits};
     |                                        ^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:345:7
     |
345  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Label` in crate `syn`
    --> tests/macros/../debug/gen.rs:1379:31
     |
1379 |             struct Print(syn::Label);
     |                               ^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:346:40
     |
346  | pub use crate::expr::{Arm, FieldValue, Label, RangeLimits};
     |                                        ^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:345:7
     |
345  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Label` in crate `syn`
    --> tests/macros/../debug/gen.rs:1670:31
     |
1670 |             struct Print(syn::Label);
     |                               ^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:346:40
     |
346  | pub use crate::expr::{Arm, FieldValue, Label, RangeLimits};
     |                                        ^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:345:7
     |
345  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `FieldPat` in crate `syn`
    --> tests/macros/../debug/gen.rs:1751:26
     |
1751 | impl Debug for Lite<syn::FieldPat> {
     |                          ^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:5
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |     ^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `FieldValue` in crate `syn`
    --> tests/macros/../debug/gen.rs:1765:26
     |
1765 | impl Debug for Lite<syn::FieldValue> {
     |                          ^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:346:28
     |
346  | pub use crate::expr::{Arm, FieldValue, Label, RangeLimits};
     |                            ^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:345:7
     |
345  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `File` in crate `syn`
    --> tests/macros/../debug/gen.rs:1818:26
     |
1818 | impl Debug for Lite<syn::File> {
     |                          ^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:363:22
     |
363  | pub use crate::file::File;
     |                      ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:362:7
     |
362  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^
help: consider importing this struct
     |
5    + use std::fs::File;
     |
help: if you import `File`, refer to it directly
     |
1818 - impl Debug for Lite<syn::File> {
1818 + impl Debug for Lite<File> {
     |

error[E0412]: cannot find type `FnArg` in crate `syn`
    --> tests/macros/../debug/gen.rs:1844:26
     |
1844 | impl Debug for Lite<syn::FnArg> {
     |                          ^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:383:5
     |
383  |     FnArg, ForeignItem, ForeignItemFn, ForeignItemMacro, ForeignItemStatic, ForeignItemType,
     |     ^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ForeignItem` in crate `syn`
    --> tests/macros/../debug/gen.rs:1864:26
     |
1864 | impl Debug for Lite<syn::ForeignItem> {
     |                          ^^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:383:12
     |
383  |     FnArg, ForeignItem, ForeignItemFn, ForeignItemMacro, ForeignItemStatic, ForeignItemType,
     |            ^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ForeignItemFn` in crate `syn`
    --> tests/macros/../debug/gen.rs:1924:26
     |
1924 | impl Debug for Lite<syn::ForeignItemFn> {
     |                          ^^^^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:383:25
     |
383  |     FnArg, ForeignItem, ForeignItemFn, ForeignItemMacro, ForeignItemStatic, ForeignItemType,
     |                         ^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ForeignItemMacro` in crate `syn`
    --> tests/macros/../debug/gen.rs:1935:26
     |
1935 | impl Debug for Lite<syn::ForeignItemMacro> {
     |                          ^^^^^^^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:383:40
     |
383  |     FnArg, ForeignItem, ForeignItemFn, ForeignItemMacro, ForeignItemStatic, ForeignItemType,
     |                                        ^^^^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ForeignItemStatic` in crate `syn`
    --> tests/macros/../debug/gen.rs:1948:26
     |
1948 | impl Debug for Lite<syn::ForeignItemStatic> {
     |                          ^^^^^^^^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:383:58
     |
383  |     FnArg, ForeignItem, ForeignItemFn, ForeignItemMacro, ForeignItemStatic, ForeignItemType,
     |                                                          ^^^^^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ForeignItemType` in crate `syn`
    --> tests/macros/../debug/gen.rs:1966:26
     |
1966 | impl Debug for Lite<syn::ForeignItemType> {
     |                          ^^^^^^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:383:77
     |
383  |     FnArg, ForeignItem, ForeignItemFn, ForeignItemMacro, ForeignItemStatic, ForeignItemType,
     |                                                                             ^^^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ImplItem` in crate `syn`
    --> tests/macros/../debug/gen.rs:2083:26
     |
2083 | impl Debug for Lite<syn::ImplItem> {
     |                          ^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:5
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |     ^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ImplItemConst` in crate `syn`
    --> tests/macros/../debug/gen.rs:2150:26
     |
2150 | impl Debug for Lite<syn::ImplItemConst> {
     |                          ^^^^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:15
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |               ^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ImplItemFn` in crate `syn`
    --> tests/macros/../debug/gen.rs:2167:26
     |
2167 | impl Debug for Lite<syn::ImplItemFn> {
     |                          ^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:30
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                              ^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ImplItemMacro` in crate `syn`
    --> tests/macros/../debug/gen.rs:2182:26
     |
2182 | impl Debug for Lite<syn::ImplItemMacro> {
     |                          ^^^^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:42
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                          ^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ImplItemType` in crate `syn`
    --> tests/macros/../debug/gen.rs:2195:26
     |
2195 | impl Debug for Lite<syn::ImplItemType> {
     |                          ^^^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:57
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                         ^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ImplRestriction` in crate `syn`
    --> tests/macros/../debug/gen.rs:2211:26
     |
2211 | impl Debug for Lite<syn::ImplRestriction> {
     |                          ^^^^^^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:71
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                                       ^^^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Item` in crate `syn`
    --> tests/macros/../debug/gen.rs:2223:26
     |
2223 | impl Debug for Lite<syn::Item> {
     |                          ^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:88
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                                                        ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Item` in crate `syn`
    --> tests/macros/../debug/gen.rs:2376:63
     |
2376 |                     struct Print((syn::token::Brace, Vec<syn::Item>));
     |                                                               ^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:88
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                                                        ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ImplRestriction` in crate `syn`
    --> tests/macros/../debug/gen.rs:2438:39
     |
2438 |                     struct Print(syn::ImplRestriction);
     |                                       ^^^^^^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:71
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                                       ^^^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ItemConst` in crate `syn`
    --> tests/macros/../debug/gen.rs:2520:26
     |
2520 | impl Debug for Lite<syn::ItemConst> {
     |                          ^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:385:5
     |
385  |     ItemConst, ItemEnum, ItemExternCrate, ItemFn, ItemForeignMod, ItemImpl, ItemMacro, ItemMod,
     |     ^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ItemEnum` in crate `syn`
    --> tests/macros/../debug/gen.rs:2534:26
     |
2534 | impl Debug for Lite<syn::ItemEnum> {
     |                          ^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:385:16
     |
385  |     ItemConst, ItemEnum, ItemExternCrate, ItemFn, ItemForeignMod, ItemImpl, ItemMacro, ItemMod,
     |                ^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ItemExternCrate` in crate `syn`
    --> tests/macros/../debug/gen.rs:2549:26
     |
2549 | impl Debug for Lite<syn::ItemExternCrate> {
     |                          ^^^^^^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:385:26
     |
385  |     ItemConst, ItemEnum, ItemExternCrate, ItemFn, ItemForeignMod, ItemImpl, ItemMacro, ItemMod,
     |                          ^^^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ItemFn` in crate `syn`
    --> tests/macros/../debug/gen.rs:2574:26
     |
2574 | impl Debug for Lite<syn::ItemFn> {
     |                          ^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:385:43
     |
385  |     ItemConst, ItemEnum, ItemExternCrate, ItemFn, ItemForeignMod, ItemImpl, ItemMacro, ItemMod,
     |                                           ^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ItemForeignMod` in crate `syn`
    --> tests/macros/../debug/gen.rs:2586:26
     |
2586 | impl Debug for Lite<syn::ItemForeignMod> {
     |                          ^^^^^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:385:51
     |
385  |     ItemConst, ItemEnum, ItemExternCrate, ItemFn, ItemForeignMod, ItemImpl, ItemMacro, ItemMod,
     |                                                   ^^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ItemImpl` in crate `syn`
    --> tests/macros/../debug/gen.rs:2602:26
     |
2602 | impl Debug for Lite<syn::ItemImpl> {
     |                          ^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:385:67
     |
385  |     ItemConst, ItemEnum, ItemExternCrate, ItemFn, ItemForeignMod, ItemImpl, ItemMacro, ItemMod,
     |                                                                   ^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ItemMacro` in crate `syn`
    --> tests/macros/../debug/gen.rs:2644:26
     |
2644 | impl Debug for Lite<syn::ItemMacro> {
     |                          ^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:385:77
     |
385  |     ItemConst, ItemEnum, ItemExternCrate, ItemFn, ItemForeignMod, ItemImpl, ItemMacro, ItemMod,
     |                                                                             ^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ItemMod` in crate `syn`
    --> tests/macros/../debug/gen.rs:2671:26
     |
2671 | impl Debug for Lite<syn::ItemMod> {
     |                          ^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:385:88
     |
385  |     ItemConst, ItemEnum, ItemExternCrate, ItemFn, ItemForeignMod, ItemImpl, ItemMacro, ItemMod,
     |                                                                                        ^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Item` in crate `syn`
    --> tests/macros/../debug/gen.rs:2685:55
     |
2685 |             struct Print((syn::token::Brace, Vec<syn::Item>));
     |                                                       ^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:88
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                                                        ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ItemStatic` in crate `syn`
    --> tests/macros/../debug/gen.rs:2702:26
     |
2702 | impl Debug for Lite<syn::ItemStatic> {
     |                          ^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:386:5
     |
386  |     ItemStatic, ItemStruct, ItemTrait, ItemTraitAlias, ItemType, ItemUnion, ItemUse, Receiver,
     |     ^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ItemStruct` in crate `syn`
    --> tests/macros/../debug/gen.rs:2721:26
     |
2721 | impl Debug for Lite<syn::ItemStruct> {
     |                          ^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:386:17
     |
386  |     ItemStatic, ItemStruct, ItemTrait, ItemTraitAlias, ItemType, ItemUnion, ItemUse, Receiver,
     |                 ^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ItemTrait` in crate `syn`
    --> tests/macros/../debug/gen.rs:2737:26
     |
2737 | impl Debug for Lite<syn::ItemTrait> {
     |                          ^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:386:29
     |
386  |     ItemStatic, ItemStruct, ItemTrait, ItemTraitAlias, ItemType, ItemUnion, ItemUse, Receiver,
     |                             ^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ImplRestriction` in crate `syn`
    --> tests/macros/../debug/gen.rs:2753:31
     |
2753 |             struct Print(syn::ImplRestriction);
     |                               ^^^^^^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:384:71
     |
384  |     ImplItem, ImplItemConst, ImplItemFn, ImplItemMacro, ImplItemType, ImplRestriction, Item,
     |                                                                       ^^^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ItemTraitAlias` in crate `syn`
    --> tests/macros/../debug/gen.rs:2778:26
     |
2778 | impl Debug for Lite<syn::ItemTraitAlias> {
     |                          ^^^^^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:386:40
     |
386  |     ItemStatic, ItemStruct, ItemTrait, ItemTraitAlias, ItemType, ItemUnion, ItemUse, Receiver,
     |                                        ^^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ItemType` in crate `syn`
    --> tests/macros/../debug/gen.rs:2793:26
     |
2793 | impl Debug for Lite<syn::ItemType> {
     |                          ^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:386:56
     |
386  |     ItemStatic, ItemStruct, ItemTrait, ItemTraitAlias, ItemType, ItemUnion, ItemUse, Receiver,
     |                                                        ^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ItemUnion` in crate `syn`
    --> tests/macros/../debug/gen.rs:2806:26
     |
2806 | impl Debug for Lite<syn::ItemUnion> {
     |                          ^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:386:66
     |
386  |     ItemStatic, ItemStruct, ItemTrait, ItemTraitAlias, ItemType, ItemUnion, ItemUse, Receiver,
     |                                                                  ^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `ItemUse` in crate `syn`
    --> tests/macros/../debug/gen.rs:2819:26
     |
2819 | impl Debug for Lite<syn::ItemUse> {
     |                          ^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:386:77
     |
386  |     ItemStatic, ItemStruct, ItemTrait, ItemTraitAlias, ItemType, ItemUnion, ItemUse, Receiver,
     |                                                                             ^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Label` in crate `syn`
    --> tests/macros/../debug/gen.rs:2833:26
     |
2833 | impl Debug for Lite<syn::Label> {
     |                          ^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:346:40
     |
346  | pub use crate::expr::{Arm, FieldValue, Label, RangeLimits};
     |                                        ^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:345:7
     |
345  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Local` in crate `syn`
    --> tests/macros/../debug/gen.rs:2925:26
     |
2925 | impl Debug for Lite<syn::Local> {
     |                          ^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:475:30
     |
475  | pub use crate::stmt::{Block, Local, LocalInit, Stmt, StmtMacro};
     |                              ^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:474:7
     |
474  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `LocalInit` in crate `syn`
    --> tests/macros/../debug/gen.rs:2935:31
     |
2935 |             struct Print(syn::LocalInit);
     |                               ^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:475:37
     |
475  | pub use crate::stmt::{Block, Local, LocalInit, Stmt, StmtMacro};
     |                                     ^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:474:7
     |
474  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `LocalInit` in crate `syn`
    --> tests/macros/../debug/gen.rs:2949:26
     |
2949 | impl Debug for Lite<syn::LocalInit> {
     |                          ^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:475:37
     |
475  | pub use crate::stmt::{Block, Local, LocalInit, Stmt, StmtMacro};
     |                                     ^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:474:7
     |
474  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Pat` in crate `syn`
    --> tests/macros/../debug/gen.rs:3073:26
     |
3073 |   impl Debug for Lite<syn::Pat> {
     |                            ^^^ help: a struct with a similar name exists: `Path`
     |
    ::: /var/tmp/top100_artifacts/syn-2.0.0/src/path.rs:4:1
     |
4    | / ast_struct! {
5    | |     /// A path at which a named item is exported (e.g. `std::collections::HashMap`).
6    | |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
7    | |     pub struct Path {
...    |
11   | | }
     | |_- similarly named struct `Path` defined here
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:15
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |               ^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Pat` in crate `syn`
    --> tests/macros/../debug/gen.rs:3098:60
     |
3098 |                       struct Print((syn::token::At, Box<syn::Pat>));
     |                                                              ^^^ help: a struct with a similar name exists: `Path`
     |
    ::: /var/tmp/top100_artifacts/syn-2.0.0/src/path.rs:4:1
     |
4    | / ast_struct! {
5    | |     /// A path at which a named item is exported (e.g. `std::collections::HashMap`).
6    | |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
7    | |     pub struct Path {
...    |
11   | | }
     | |_- similarly named struct `Path` defined here
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:15
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |               ^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `PatRest` in crate `syn`
    --> tests/macros/../debug/gen.rs:3214:39
     |
3214 |                     struct Print(syn::PatRest);
     |                                       ^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:61
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |                                                             ^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `PatIdent` in crate `syn`
    --> tests/macros/../debug/gen.rs:3289:26
     |
3289 | impl Debug for Lite<syn::PatIdent> {
     |                          ^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:20
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |                    ^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Pat` in crate `syn`
    --> tests/macros/../debug/gen.rs:3305:52
     |
3305 |               struct Print((syn::token::At, Box<syn::Pat>));
     |                                                      ^^^ help: a struct with a similar name exists: `Path`
     |
    ::: /var/tmp/top100_artifacts/syn-2.0.0/src/path.rs:4:1
     |
4    | / ast_struct! {
5    | |     /// A path at which a named item is exported (e.g. `std::collections::HashMap`).
6    | |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
7    | |     pub struct Path {
...    |
11   | | }
     | |_- similarly named struct `Path` defined here
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:15
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |               ^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `PatOr` in crate `syn`
    --> tests/macros/../debug/gen.rs:3319:26
     |
3319 | impl Debug for Lite<syn::PatOr> {
     |                          ^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:30
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |                              ^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `PatParen` in crate `syn`
    --> tests/macros/../debug/gen.rs:3334:26
     |
3334 | impl Debug for Lite<syn::PatParen> {
     |                          ^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:37
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |                                     ^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `PatReference` in crate `syn`
    --> tests/macros/../debug/gen.rs:3344:26
     |
3344 |   impl Debug for Lite<syn::PatReference> {
     |                            ^^^^^^^^^^^^ help: a struct with a similar name exists: `ExprReference`
     |
    ::: /var/tmp/top100_artifacts/syn-2.0.0/src/expr.rs:553:1
     |
553  | / ast_struct! {
554  | |     /// A referencing operation: `&a` or `&mut a`.
555  | |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
556  | |     pub struct ExprReference #full {
...    |
562  | | }
     | |_- similarly named struct `ExprReference` defined here
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:47
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |                                               ^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `PatRest` in crate `syn`
    --> tests/macros/../debug/gen.rs:3357:26
     |
3357 | impl Debug for Lite<syn::PatRest> {
     |                          ^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:61
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |                                                             ^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `PatSlice` in crate `syn`
    --> tests/macros/../debug/gen.rs:3366:26
     |
3366 | impl Debug for Lite<syn::PatSlice> {
     |                          ^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:70
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |                                                                      ^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `PatStruct` in crate `syn`
    --> tests/macros/../debug/gen.rs:3378:26
     |
3378 |   impl Debug for Lite<syn::PatStruct> {
     |                            ^^^^^^^^^ help: a struct with a similar name exists: `DataStruct`
     |
    ::: /var/tmp/top100_artifacts/syn-2.0.0/src/derive.rs:32:1
     |
32   | / ast_struct! {
33   | |     /// A struct input to a `proc_macro_derive` macro.
34   | |     #[cfg_attr(doc_cfg, doc(cfg(feature = "derive")))]
35   | |     pub struct DataStruct {
...    |
40   | | }
     | |_- similarly named struct `DataStruct` defined here
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:80
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |                                                                                ^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `PatRest` in crate `syn`
    --> tests/macros/../debug/gen.rs:3405:31
     |
3405 |             struct Print(syn::PatRest);
     |                               ^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:61
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |                                                             ^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `PatTuple` in crate `syn`
    --> tests/macros/../debug/gen.rs:3419:26
     |
3419 | impl Debug for Lite<syn::PatTuple> {
     |                          ^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:91
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |                                                                                           ^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `PatTupleStruct` in crate `syn`
    --> tests/macros/../debug/gen.rs:3431:26
     |
3431 | impl Debug for Lite<syn::PatTupleStruct> {
     |                          ^^^^^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:443:5
     |
443  |     PatTupleStruct, PatType, PatWild,
     |     ^^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `PatType` in crate `syn`
    --> tests/macros/../debug/gen.rs:3458:26
     |
3458 | impl Debug for Lite<syn::PatType> {
     |                          ^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:443:21
     |
443  |     PatTupleStruct, PatType, PatWild,
     |                     ^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `PatWild` in crate `syn`
    --> tests/macros/../debug/gen.rs:3469:26
     |
3469 | impl Debug for Lite<syn::PatWild> {
     |                          ^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:443:30
     |
443  |     PatTupleStruct, PatType, PatWild,
     |                              ^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `RangeLimits` in crate `syn`
    --> tests/macros/../debug/gen.rs:3575:26
     |
3575 | impl Debug for Lite<syn::RangeLimits> {
     |                          ^^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:346:47
     |
346  | pub use crate::expr::{Arm, FieldValue, Label, RangeLimits};
     |                                               ^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:345:7
     |
345  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Receiver` in crate `syn`
    --> tests/macros/../debug/gen.rs:3589:26
     |
3589 | impl Debug for Lite<syn::Receiver> {
     |                          ^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:386:86
     |
386  |     ItemStatic, ItemStruct, ItemTrait, ItemTraitAlias, ItemType, ItemUnion, ItemUse, Receiver,
     |                                                                                      ^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^
help: consider importing one of these items
     |
5    + use std::ops::Receiver;
     |
5    + use std::sync::mpmc::Receiver;
     |
5    + use std::sync::mpsc::Receiver;
     |
5    + use core::ops::Receiver;
     |
help: if you import `Receiver`, refer to it directly
     |
3589 - impl Debug for Lite<syn::Receiver> {
3589 + impl Debug for Lite<Receiver> {
     |

error[E0412]: cannot find type `Signature` in crate `syn`
    --> tests/macros/../debug/gen.rs:3655:26
     |
3655 | impl Debug for Lite<syn::Signature> {
     |                          ^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:387:5
     |
387  |     Signature, StaticMutability, TraitItem, TraitItemConst, TraitItemFn, TraitItemMacro,
     |     ^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Variadic` in crate `syn`
    --> tests/macros/../debug/gen.rs:3689:31
     |
3689 |             struct Print(syn::Variadic);
     |                               ^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:388:77
     |
388  |     TraitItemType, UseGlob, UseGroup, UseName, UsePath, UseRename, UseTree, Variadic,
     |                                                                             ^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `StaticMutability` in crate `syn`
    --> tests/macros/../debug/gen.rs:3704:26
     |
3704 | impl Debug for Lite<syn::StaticMutability> {
     |                          ^^^^^^^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:387:16
     |
387  |     Signature, StaticMutability, TraitItem, TraitItemConst, TraitItemFn, TraitItemMacro,
     |                ^^^^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Stmt` in crate `syn`
    --> tests/macros/../debug/gen.rs:3716:26
     |
3716 | impl Debug for Lite<syn::Stmt> {
     |                          ^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:475:48
     |
475  | pub use crate::stmt::{Block, Local, LocalInit, Stmt, StmtMacro};
     |                                                ^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:474:7
     |
474  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `LocalInit` in crate `syn`
    --> tests/macros/../debug/gen.rs:3728:39
     |
3728 |                     struct Print(syn::LocalInit);
     |                                       ^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:475:37
     |
475  | pub use crate::stmt::{Block, Local, LocalInit, Stmt, StmtMacro};
     |                                     ^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:474:7
     |
474  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `StmtMacro` in crate `syn`
    --> tests/macros/../debug/gen.rs:3773:26
     |
3773 | impl Debug for Lite<syn::StmtMacro> {
     |                          ^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:475:54
     |
475  | pub use crate::stmt::{Block, Local, LocalInit, Stmt, StmtMacro};
     |                                                      ^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:474:7
     |
474  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `TraitItem` in crate `syn`
    --> tests/macros/../debug/gen.rs:3829:26
     |
3829 | impl Debug for Lite<syn::TraitItem> {
     |                          ^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:387:34
     |
387  |     Signature, StaticMutability, TraitItem, TraitItemConst, TraitItemFn, TraitItemMacro,
     |                                  ^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Block` in crate `syn`
    --> tests/macros/../debug/gen.rs:3865:39
     |
3865 |                     struct Print(syn::Block);
     |                                       ^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:475:23
     |
475  | pub use crate::stmt::{Block, Local, LocalInit, Stmt, StmtMacro};
     |                       ^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:474:7
     |
474  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^
help: there is an enum variant `syn::Expr::Block` and 1 other; try using the variant's enum
     |
3865 -                     struct Print(syn::Block);
3865 +                     struct Print(syn::Expr);
     |
3865 -                     struct Print(syn::Block);
3865 +                     struct Print(tar::EntryType);
     |

error[E0412]: cannot find type `TraitItemConst` in crate `syn`
    --> tests/macros/../debug/gen.rs:3932:26
     |
3932 | impl Debug for Lite<syn::TraitItemConst> {
     |                          ^^^^^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:387:45
     |
387  |     Signature, StaticMutability, TraitItem, TraitItemConst, TraitItemFn, TraitItemMacro,
     |                                             ^^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `TraitItemFn` in crate `syn`
    --> tests/macros/../debug/gen.rs:3958:26
     |
3958 | impl Debug for Lite<syn::TraitItemFn> {
     |                          ^^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:387:61
     |
387  |     Signature, StaticMutability, TraitItem, TraitItemConst, TraitItemFn, TraitItemMacro,
     |                                                             ^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Block` in crate `syn`
    --> tests/macros/../debug/gen.rs:3968:31
     |
3968 |             struct Print(syn::Block);
     |                               ^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:475:23
     |
475  | pub use crate::stmt::{Block, Local, LocalInit, Stmt, StmtMacro};
     |                       ^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:474:7
     |
474  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^
help: there is an enum variant `syn::Expr::Block` and 1 other; try using the variant's enum
     |
3968 -             struct Print(syn::Block);
3968 +             struct Print(syn::Expr);
     |
3968 -             struct Print(syn::Block);
3968 +             struct Print(tar::EntryType);
     |

error[E0412]: cannot find type `TraitItemMacro` in crate `syn`
    --> tests/macros/../debug/gen.rs:3985:26
     |
3985 | impl Debug for Lite<syn::TraitItemMacro> {
     |                          ^^^^^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:387:74
     |
387  |     Signature, StaticMutability, TraitItem, TraitItemConst, TraitItemFn, TraitItemMacro,
     |                                                                          ^^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `TraitItemType` in crate `syn`
    --> tests/macros/../debug/gen.rs:3998:26
     |
3998 | impl Debug for Lite<syn::TraitItemType> {
     |                          ^^^^^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:388:5
     |
388  |     TraitItemType, UseGlob, UseGroup, UseName, UsePath, UseRename, UseTree, Variadic,
     |     ^^^^^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `UseGlob` in crate `syn`
    --> tests/macros/../debug/gen.rs:4475:26
     |
4475 | impl Debug for Lite<syn::UseGlob> {
     |                          ^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:388:20
     |
388  |     TraitItemType, UseGlob, UseGroup, UseName, UsePath, UseRename, UseTree, Variadic,
     |                    ^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `UseGroup` in crate `syn`
    --> tests/macros/../debug/gen.rs:4481:26
     |
4481 | impl Debug for Lite<syn::UseGroup> {
     |                          ^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:388:29
     |
388  |     TraitItemType, UseGlob, UseGroup, UseName, UsePath, UseRename, UseTree, Variadic,
     |                             ^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `UseName` in crate `syn`
    --> tests/macros/../debug/gen.rs:4490:26
     |
4490 | impl Debug for Lite<syn::UseName> {
     |                          ^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:388:39
     |
388  |     TraitItemType, UseGlob, UseGroup, UseName, UsePath, UseRename, UseTree, Variadic,
     |                                       ^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `UsePath` in crate `syn`
    --> tests/macros/../debug/gen.rs:4497:26
     |
4497 | impl Debug for Lite<syn::UsePath> {
     |                          ^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:388:48
     |
388  |     TraitItemType, UseGlob, UseGroup, UseName, UsePath, UseRename, UseTree, Variadic,
     |                                                ^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `UseRename` in crate `syn`
    --> tests/macros/../debug/gen.rs:4505:26
     |
4505 | impl Debug for Lite<syn::UseRename> {
     |                          ^^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:388:57
     |
388  |     TraitItemType, UseGlob, UseGroup, UseName, UsePath, UseRename, UseTree, Variadic,
     |                                                         ^^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `UseTree` in crate `syn`
    --> tests/macros/../debug/gen.rs:4513:26
     |
4513 | impl Debug for Lite<syn::UseTree> {
     |                          ^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:388:68
     |
388  |     TraitItemType, UseGlob, UseGroup, UseName, UsePath, UseRename, UseTree, Variadic,
     |                                                                    ^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Variadic` in crate `syn`
    --> tests/macros/../debug/gen.rs:4554:26
     |
4554 | impl Debug for Lite<syn::Variadic> {
     |                          ^^^^^^^^ not found in `syn`
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:388:77
     |
388  |     TraitItemType, UseGlob, UseGroup, UseName, UsePath, UseRename, UseTree, Variadic,
     |                                                                             ^^^^^^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:381:7
     |
381  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0412]: cannot find type `Pat` in crate `syn`
    --> tests/macros/../debug/gen.rs:4563:36
     |
4563 |               struct Print((Box<syn::Pat>, syn::token::Colon));
     |                                      ^^^ help: a struct with a similar name exists: `Path`
     |
    ::: /var/tmp/top100_artifacts/syn-2.0.0/src/path.rs:4:1
     |
4    | / ast_struct! {
5    | |     /// A path at which a named item is exported (e.g. `std::collections::HashMap`).
6    | |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
7    | |     pub struct Path {
...    |
11   | | }
     | |_- similarly named struct `Path` defined here
     |
note: found an item that was configured out
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:442:15
     |
442  |     FieldPat, Pat, PatIdent, PatOr, PatParen, PatReference, PatRest, PatSlice, PatStruct, PatTuple,
     |               ^^^
note: the item is gated behind the `full` feature
    --> /var/tmp/top100_artifacts/syn-2.0.0/src/lib.rs:440:7
     |
440  | #[cfg(feature = "full")]
     |       ^^^^^^^^^^^^^^^^

error[E0609]: no field `attrs` on type `&ExprArray`
   --> tests/macros/../debug/gen.rs:440:26
    |
440 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprArray`
   --> tests/macros/../debug/gen.rs:441:57
    |
441 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `elems` on type `&ExprArray`
   --> tests/macros/../debug/gen.rs:443:26
    |
443 |                 if !_val.elems.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `elems` on type `&ExprArray`
   --> tests/macros/../debug/gen.rs:444:57
    |
444 |                     formatter.field("elems", Lite(&_val.elems));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprAssign`
   --> tests/macros/../debug/gen.rs:450:26
    |
450 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprAssign`
   --> tests/macros/../debug/gen.rs:451:57
    |
451 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `left` on type `&ExprAssign`
   --> tests/macros/../debug/gen.rs:453:52
    |
453 |                 formatter.field("left", Lite(&_val.left));
    |                                                    ^^^^ unknown field

error[E0609]: no field `right` on type `&ExprAssign`
   --> tests/macros/../debug/gen.rs:454:53
    |
454 |                 formatter.field("right", Lite(&_val.right));
    |                                                     ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprAsync`
   --> tests/macros/../debug/gen.rs:459:26
    |
459 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprAsync`
   --> tests/macros/../debug/gen.rs:460:57
    |
460 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `capture` on type `&ExprAsync`
   --> tests/macros/../debug/gen.rs:462:25
    |
462 |                 if _val.capture.is_some() {
    |                         ^^^^^^^ unknown field

error[E0609]: no field `block` on type `&ExprAsync`
   --> tests/macros/../debug/gen.rs:465:53
    |
465 |                 formatter.field("block", Lite(&_val.block));
    |                                                     ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprAwait`
   --> tests/macros/../debug/gen.rs:470:26
    |
470 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprAwait`
   --> tests/macros/../debug/gen.rs:471:57
    |
471 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `base` on type `&ExprAwait`
   --> tests/macros/../debug/gen.rs:473:52
    |
473 |                 formatter.field("base", Lite(&_val.base));
    |                                                    ^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprBlock`
   --> tests/macros/../debug/gen.rs:488:26
    |
488 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprBlock`
   --> tests/macros/../debug/gen.rs:489:57
    |
489 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `label` on type `&ExprBlock`
   --> tests/macros/../debug/gen.rs:491:42
    |
491 |                 if let Some(val) = &_val.label {
    |                                          ^^^^^ unknown field

error[E0609]: no field `block` on type `&ExprBlock`
   --> tests/macros/../debug/gen.rs:505:53
    |
505 |                 formatter.field("block", Lite(&_val.block));
    |                                                     ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprBreak`
   --> tests/macros/../debug/gen.rs:510:26
    |
510 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprBreak`
   --> tests/macros/../debug/gen.rs:511:57
    |
511 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `label` on type `&ExprBreak`
   --> tests/macros/../debug/gen.rs:513:42
    |
513 |                 if let Some(val) = &_val.label {
    |                                          ^^^^^ unknown field

error[E0609]: no field `expr` on type `&ExprBreak`
   --> tests/macros/../debug/gen.rs:527:42
    |
527 |                 if let Some(val) = &_val.expr {
    |                                          ^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprClosure`
   --> tests/macros/../debug/gen.rs:565:26
    |
565 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprClosure`
   --> tests/macros/../debug/gen.rs:566:57
    |
566 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `lifetimes` on type `&ExprClosure`
   --> tests/macros/../debug/gen.rs:568:42
    |
568 |                 if let Some(val) = &_val.lifetimes {
    |                                          ^^^^^^^^^ unknown field

error[E0609]: no field `constness` on type `&ExprClosure`
   --> tests/macros/../debug/gen.rs:582:25
    |
582 |                 if _val.constness.is_some() {
    |                         ^^^^^^^^^ unknown field

error[E0609]: no field `movability` on type `&ExprClosure`
   --> tests/macros/../debug/gen.rs:585:25
    |
585 |                 if _val.movability.is_some() {
    |                         ^^^^^^^^^^ unknown field

error[E0609]: no field `asyncness` on type `&ExprClosure`
   --> tests/macros/../debug/gen.rs:588:25
    |
588 |                 if _val.asyncness.is_some() {
    |                         ^^^^^^^^^ unknown field

error[E0609]: no field `capture` on type `&ExprClosure`
   --> tests/macros/../debug/gen.rs:591:25
    |
591 |                 if _val.capture.is_some() {
    |                         ^^^^^^^ unknown field

error[E0609]: no field `inputs` on type `&ExprClosure`
   --> tests/macros/../debug/gen.rs:594:26
    |
594 |                 if !_val.inputs.is_empty() {
    |                          ^^^^^^ unknown field

error[E0609]: no field `inputs` on type `&ExprClosure`
   --> tests/macros/../debug/gen.rs:595:58
    |
595 |                     formatter.field("inputs", Lite(&_val.inputs));
    |                                                          ^^^^^^ unknown field

error[E0609]: no field `output` on type `&ExprClosure`
   --> tests/macros/../debug/gen.rs:597:54
    |
597 |                 formatter.field("output", Lite(&_val.output));
    |                                                      ^^^^^^ unknown field

error[E0609]: no field `body` on type `&ExprClosure`
   --> tests/macros/../debug/gen.rs:598:52
    |
598 |                 formatter.field("body", Lite(&_val.body));
    |                                                    ^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprConst`
   --> tests/macros/../debug/gen.rs:603:26
    |
603 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprConst`
   --> tests/macros/../debug/gen.rs:604:57
    |
604 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `block` on type `&ExprConst`
   --> tests/macros/../debug/gen.rs:606:53
    |
606 |                 formatter.field("block", Lite(&_val.block));
    |                                                     ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprContinue`
   --> tests/macros/../debug/gen.rs:611:26
    |
611 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprContinue`
   --> tests/macros/../debug/gen.rs:612:57
    |
612 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `label` on type `&ExprContinue`
   --> tests/macros/../debug/gen.rs:614:42
    |
614 |                 if let Some(val) = &_val.label {
    |                                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprForLoop`
   --> tests/macros/../debug/gen.rs:641:26
    |
641 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprForLoop`
   --> tests/macros/../debug/gen.rs:642:57
    |
642 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `label` on type `&ExprForLoop`
   --> tests/macros/../debug/gen.rs:644:42
    |
644 |                 if let Some(val) = &_val.label {
    |                                          ^^^^^ unknown field

error[E0609]: no field `pat` on type `&ExprForLoop`
   --> tests/macros/../debug/gen.rs:658:51
    |
658 |                 formatter.field("pat", Lite(&_val.pat));
    |                                                   ^^^ unknown field

error[E0609]: no field `expr` on type `&ExprForLoop`
   --> tests/macros/../debug/gen.rs:659:52
    |
659 |                 formatter.field("expr", Lite(&_val.expr));
    |                                                    ^^^^ unknown field

error[E0609]: no field `body` on type `&ExprForLoop`
   --> tests/macros/../debug/gen.rs:660:52
    |
660 |                 formatter.field("body", Lite(&_val.body));
    |                                                    ^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprGroup`
   --> tests/macros/../debug/gen.rs:665:26
    |
665 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprGroup`
   --> tests/macros/../debug/gen.rs:666:57
    |
666 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `expr` on type `&ExprGroup`
   --> tests/macros/../debug/gen.rs:668:52
    |
668 |                 formatter.field("expr", Lite(&_val.expr));
    |                                                    ^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprIf`
   --> tests/macros/../debug/gen.rs:673:26
    |
673 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprIf`
   --> tests/macros/../debug/gen.rs:674:57
    |
674 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `cond` on type `&ExprIf`
   --> tests/macros/../debug/gen.rs:676:52
    |
676 |                 formatter.field("cond", Lite(&_val.cond));
    |                                                    ^^^^ unknown field

error[E0609]: no field `then_branch` on type `&ExprIf`
   --> tests/macros/../debug/gen.rs:677:59
    |
677 |                 formatter.field("then_branch", Lite(&_val.then_branch));
    |                                                           ^^^^^^^^^^^ unknown field

error[E0609]: no field `else_branch` on type `&ExprIf`
   --> tests/macros/../debug/gen.rs:678:42
    |
678 |                 if let Some(val) = &_val.else_branch {
    |                                          ^^^^^^^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprInfer`
   --> tests/macros/../debug/gen.rs:705:26
    |
705 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprInfer`
   --> tests/macros/../debug/gen.rs:706:57
    |
706 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprLet`
   --> tests/macros/../debug/gen.rs:712:26
    |
712 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprLet`
   --> tests/macros/../debug/gen.rs:713:57
    |
713 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `pat` on type `&ExprLet`
   --> tests/macros/../debug/gen.rs:715:51
    |
715 |                 formatter.field("pat", Lite(&_val.pat));
    |                                                   ^^^ unknown field

error[E0609]: no field `expr` on type `&ExprLet`
   --> tests/macros/../debug/gen.rs:716:52
    |
716 |                 formatter.field("expr", Lite(&_val.expr));
    |                                                    ^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprLoop`
   --> tests/macros/../debug/gen.rs:729:26
    |
729 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprLoop`
   --> tests/macros/../debug/gen.rs:730:57
    |
730 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `label` on type `&ExprLoop`
   --> tests/macros/../debug/gen.rs:732:42
    |
732 |                 if let Some(val) = &_val.label {
    |                                          ^^^^^ unknown field

error[E0609]: no field `body` on type `&ExprLoop`
   --> tests/macros/../debug/gen.rs:746:52
    |
746 |                 formatter.field("body", Lite(&_val.body));
    |                                                    ^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprMacro`
   --> tests/macros/../debug/gen.rs:751:26
    |
751 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprMacro`
   --> tests/macros/../debug/gen.rs:752:57
    |
752 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `mac` on type `&ExprMacro`
   --> tests/macros/../debug/gen.rs:754:51
    |
754 |                 formatter.field("mac", Lite(&_val.mac));
    |                                                   ^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprMatch`
   --> tests/macros/../debug/gen.rs:759:26
    |
759 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprMatch`
   --> tests/macros/../debug/gen.rs:760:57
    |
760 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `expr` on type `&ExprMatch`
   --> tests/macros/../debug/gen.rs:762:52
    |
762 |                 formatter.field("expr", Lite(&_val.expr));
    |                                                    ^^^^ unknown field

error[E0609]: no field `arms` on type `&ExprMatch`
   --> tests/macros/../debug/gen.rs:763:26
    |
763 |                 if !_val.arms.is_empty() {
    |                          ^^^^ unknown field

error[E0609]: no field `arms` on type `&ExprMatch`
   --> tests/macros/../debug/gen.rs:764:56
    |
764 |                     formatter.field("arms", Lite(&_val.arms));
    |                                                        ^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprMethodCall`
   --> tests/macros/../debug/gen.rs:770:26
    |
770 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprMethodCall`
   --> tests/macros/../debug/gen.rs:771:57
    |
771 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `receiver` on type `&ExprMethodCall`
   --> tests/macros/../debug/gen.rs:773:56
    |
773 |                 formatter.field("receiver", Lite(&_val.receiver));
    |                                                        ^^^^^^^^ unknown field

error[E0609]: no field `method` on type `&ExprMethodCall`
   --> tests/macros/../debug/gen.rs:774:54
    |
774 |                 formatter.field("method", Lite(&_val.method));
    |                                                      ^^^^^^ unknown field

error[E0609]: no field `turbofish` on type `&ExprMethodCall`
   --> tests/macros/../debug/gen.rs:775:42
    |
775 |                 if let Some(val) = &_val.turbofish {
    |                                          ^^^^^^^^^ unknown field

error[E0609]: no field `args` on type `&ExprMethodCall`
   --> tests/macros/../debug/gen.rs:789:26
    |
789 |                 if !_val.args.is_empty() {
    |                          ^^^^ unknown field

error[E0609]: no field `args` on type `&ExprMethodCall`
   --> tests/macros/../debug/gen.rs:790:56
    |
790 |                     formatter.field("args", Lite(&_val.args));
    |                                                        ^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprRange`
   --> tests/macros/../debug/gen.rs:826:26
    |
826 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprRange`
   --> tests/macros/../debug/gen.rs:827:57
    |
827 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `start` on type `&ExprRange`
   --> tests/macros/../debug/gen.rs:829:42
    |
829 |                 if let Some(val) = &_val.start {
    |                                          ^^^^^ unknown field

error[E0609]: no field `limits` on type `&ExprRange`
   --> tests/macros/../debug/gen.rs:843:54
    |
843 |                 formatter.field("limits", Lite(&_val.limits));
    |                                                      ^^^^^^ unknown field

error[E0609]: no field `end` on type `&ExprRange`
   --> tests/macros/../debug/gen.rs:844:42
    |
844 |                 if let Some(val) = &_val.end {
    |                                          ^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprReference`
   --> tests/macros/../debug/gen.rs:862:26
    |
862 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprReference`
   --> tests/macros/../debug/gen.rs:863:57
    |
863 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `mutability` on type `&ExprReference`
   --> tests/macros/../debug/gen.rs:865:25
    |
865 |                 if _val.mutability.is_some() {
    |                         ^^^^^^^^^^ unknown field

error[E0609]: no field `expr` on type `&ExprReference`
   --> tests/macros/../debug/gen.rs:868:52
    |
868 |                 formatter.field("expr", Lite(&_val.expr));
    |                                                    ^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprRepeat`
   --> tests/macros/../debug/gen.rs:873:26
    |
873 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprRepeat`
   --> tests/macros/../debug/gen.rs:874:57
    |
874 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `expr` on type `&ExprRepeat`
   --> tests/macros/../debug/gen.rs:876:52
    |
876 |                 formatter.field("expr", Lite(&_val.expr));
    |                                                    ^^^^ unknown field

error[E0609]: no field `len` on type `&ExprRepeat`
   --> tests/macros/../debug/gen.rs:877:51
    |
877 |                 formatter.field("len", Lite(&_val.len));
    |                                                   ^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprReturn`
   --> tests/macros/../debug/gen.rs:882:26
    |
882 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprReturn`
   --> tests/macros/../debug/gen.rs:883:57
    |
883 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `expr` on type `&ExprReturn`
   --> tests/macros/../debug/gen.rs:885:42
    |
885 |                 if let Some(val) = &_val.expr {
    |                                          ^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprStruct`
   --> tests/macros/../debug/gen.rs:903:26
    |
903 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprStruct`
   --> tests/macros/../debug/gen.rs:904:57
    |
904 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `qself` on type `&ExprStruct`
   --> tests/macros/../debug/gen.rs:906:42
    |
906 |                 if let Some(val) = &_val.qself {
    |                                          ^^^^^ unknown field

error[E0609]: no field `path` on type `&ExprStruct`
   --> tests/macros/../debug/gen.rs:920:52
    |
920 |                 formatter.field("path", Lite(&_val.path));
    |                                                    ^^^^ unknown field

error[E0609]: no field `fields` on type `&ExprStruct`
   --> tests/macros/../debug/gen.rs:921:26
    |
921 |                 if !_val.fields.is_empty() {
    |                          ^^^^^^ unknown field

error[E0609]: no field `fields` on type `&ExprStruct`
   --> tests/macros/../debug/gen.rs:922:58
    |
922 |                     formatter.field("fields", Lite(&_val.fields));
    |                                                          ^^^^^^ unknown field

error[E0609]: no field `dot2_token` on type `&ExprStruct`
   --> tests/macros/../debug/gen.rs:924:25
    |
924 |                 if _val.dot2_token.is_some() {
    |                         ^^^^^^^^^^ unknown field

error[E0609]: no field `rest` on type `&ExprStruct`
   --> tests/macros/../debug/gen.rs:927:42
    |
927 |                 if let Some(val) = &_val.rest {
    |                                          ^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprTry`
   --> tests/macros/../debug/gen.rs:945:26
    |
945 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprTry`
   --> tests/macros/../debug/gen.rs:946:57
    |
946 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `expr` on type `&ExprTry`
   --> tests/macros/../debug/gen.rs:948:52
    |
948 |                 formatter.field("expr", Lite(&_val.expr));
    |                                                    ^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprTryBlock`
   --> tests/macros/../debug/gen.rs:953:26
    |
953 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprTryBlock`
   --> tests/macros/../debug/gen.rs:954:57
    |
954 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `block` on type `&ExprTryBlock`
   --> tests/macros/../debug/gen.rs:956:53
    |
956 |                 formatter.field("block", Lite(&_val.block));
    |                                                     ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprTuple`
   --> tests/macros/../debug/gen.rs:961:26
    |
961 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprTuple`
   --> tests/macros/../debug/gen.rs:962:57
    |
962 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `elems` on type `&ExprTuple`
   --> tests/macros/../debug/gen.rs:964:26
    |
964 |                 if !_val.elems.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `elems` on type `&ExprTuple`
   --> tests/macros/../debug/gen.rs:965:57
    |
965 |                     formatter.field("elems", Lite(&_val.elems));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprUnsafe`
   --> tests/macros/../debug/gen.rs:980:26
    |
980 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprUnsafe`
   --> tests/macros/../debug/gen.rs:981:57
    |
981 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `block` on type `&ExprUnsafe`
   --> tests/macros/../debug/gen.rs:983:53
    |
983 |                 formatter.field("block", Lite(&_val.block));
    |                                                     ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprWhile`
   --> tests/macros/../debug/gen.rs:995:26
    |
995 |                 if !_val.attrs.is_empty() {
    |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprWhile`
   --> tests/macros/../debug/gen.rs:996:57
    |
996 |                     formatter.field("attrs", Lite(&_val.attrs));
    |                                                         ^^^^^ unknown field

error[E0609]: no field `label` on type `&ExprWhile`
   --> tests/macros/../debug/gen.rs:998:42
    |
998 |                 if let Some(val) = &_val.label {
    |                                          ^^^^^ unknown field

error[E0609]: no field `cond` on type `&ExprWhile`
    --> tests/macros/../debug/gen.rs:1012:52
     |
1012 |                 formatter.field("cond", Lite(&_val.cond));
     |                                                    ^^^^ unknown field

error[E0609]: no field `body` on type `&ExprWhile`
    --> tests/macros/../debug/gen.rs:1013:52
     |
1013 |                 formatter.field("body", Lite(&_val.body));
     |                                                    ^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprYield`
    --> tests/macros/../debug/gen.rs:1018:26
     |
1018 |                 if !_val.attrs.is_empty() {
     |                          ^^^^^ unknown field

error[E0609]: no field `attrs` on type `&ExprYield`
    --> tests/macros/../debug/gen.rs:1019:57
     |
1019 |                     formatter.field("attrs", Lite(&_val.attrs));
     |                                                         ^^^^^ unknown field

error[E0609]: no field `expr` on type `&ExprYield`
    --> tests/macros/../debug/gen.rs:1021:42
     |
1021 |                 if let Some(val) = &_val.expr {
     |                                          ^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprArray`
    --> tests/macros/../debug/gen.rs:1044:24
     |
1044 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprArray`
    --> tests/macros/../debug/gen.rs:1045:55
     |
1045 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `elems` on type `ExprArray`
    --> tests/macros/../debug/gen.rs:1047:24
     |
1047 |         if !self.value.elems.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `elems` on type `ExprArray`
    --> tests/macros/../debug/gen.rs:1048:55
     |
1048 |             formatter.field("elems", Lite(&self.value.elems));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprAssign`
    --> tests/macros/../debug/gen.rs:1056:24
     |
1056 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprAssign`
    --> tests/macros/../debug/gen.rs:1057:55
     |
1057 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `left` on type `ExprAssign`
    --> tests/macros/../debug/gen.rs:1059:50
     |
1059 |         formatter.field("left", Lite(&self.value.left));
     |                                                  ^^^^ unknown field

error[E0609]: no field `right` on type `ExprAssign`
    --> tests/macros/../debug/gen.rs:1060:51
     |
1060 |         formatter.field("right", Lite(&self.value.right));
     |                                                   ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprAsync`
    --> tests/macros/../debug/gen.rs:1067:24
     |
1067 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprAsync`
    --> tests/macros/../debug/gen.rs:1068:55
     |
1068 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `capture` on type `ExprAsync`
    --> tests/macros/../debug/gen.rs:1070:23
     |
1070 |         if self.value.capture.is_some() {
     |                       ^^^^^^^ unknown field

error[E0609]: no field `block` on type `ExprAsync`
    --> tests/macros/../debug/gen.rs:1073:51
     |
1073 |         formatter.field("block", Lite(&self.value.block));
     |                                                   ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprAwait`
    --> tests/macros/../debug/gen.rs:1080:24
     |
1080 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprAwait`
    --> tests/macros/../debug/gen.rs:1081:55
     |
1081 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `base` on type `ExprAwait`
    --> tests/macros/../debug/gen.rs:1083:50
     |
1083 |         formatter.field("base", Lite(&self.value.base));
     |                                                  ^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprBlock`
    --> tests/macros/../debug/gen.rs:1102:24
     |
1102 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprBlock`
    --> tests/macros/../debug/gen.rs:1103:55
     |
1103 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `label` on type `ExprBlock`
    --> tests/macros/../debug/gen.rs:1105:40
     |
1105 |         if let Some(val) = &self.value.label {
     |                                        ^^^^^ unknown field

error[E0609]: no field `block` on type `ExprBlock`
    --> tests/macros/../debug/gen.rs:1119:51
     |
1119 |         formatter.field("block", Lite(&self.value.block));
     |                                                   ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprBreak`
    --> tests/macros/../debug/gen.rs:1126:24
     |
1126 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprBreak`
    --> tests/macros/../debug/gen.rs:1127:55
     |
1127 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `label` on type `ExprBreak`
    --> tests/macros/../debug/gen.rs:1129:40
     |
1129 |         if let Some(val) = &self.value.label {
     |                                        ^^^^^ unknown field

error[E0609]: no field `expr` on type `ExprBreak`
    --> tests/macros/../debug/gen.rs:1143:40
     |
1143 |         if let Some(val) = &self.value.expr {
     |                                        ^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprClosure`
    --> tests/macros/../debug/gen.rs:1187:24
     |
1187 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprClosure`
    --> tests/macros/../debug/gen.rs:1188:55
     |
1188 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `lifetimes` on type `ExprClosure`
    --> tests/macros/../debug/gen.rs:1190:40
     |
1190 |         if let Some(val) = &self.value.lifetimes {
     |                                        ^^^^^^^^^ unknown field

error[E0609]: no field `constness` on type `ExprClosure`
    --> tests/macros/../debug/gen.rs:1204:23
     |
1204 |         if self.value.constness.is_some() {
     |                       ^^^^^^^^^ unknown field

error[E0609]: no field `movability` on type `ExprClosure`
    --> tests/macros/../debug/gen.rs:1207:23
     |
1207 |         if self.value.movability.is_some() {
     |                       ^^^^^^^^^^ unknown field

error[E0609]: no field `asyncness` on type `ExprClosure`
    --> tests/macros/../debug/gen.rs:1210:23
     |
1210 |         if self.value.asyncness.is_some() {
     |                       ^^^^^^^^^ unknown field

error[E0609]: no field `capture` on type `ExprClosure`
    --> tests/macros/../debug/gen.rs:1213:23
     |
1213 |         if self.value.capture.is_some() {
     |                       ^^^^^^^ unknown field

error[E0609]: no field `inputs` on type `ExprClosure`
    --> tests/macros/../debug/gen.rs:1216:24
     |
1216 |         if !self.value.inputs.is_empty() {
     |                        ^^^^^^ unknown field

error[E0609]: no field `inputs` on type `ExprClosure`
    --> tests/macros/../debug/gen.rs:1217:56
     |
1217 |             formatter.field("inputs", Lite(&self.value.inputs));
     |                                                        ^^^^^^ unknown field

error[E0609]: no field `output` on type `ExprClosure`
    --> tests/macros/../debug/gen.rs:1219:52
     |
1219 |         formatter.field("output", Lite(&self.value.output));
     |                                                    ^^^^^^ unknown field

error[E0609]: no field `body` on type `ExprClosure`
    --> tests/macros/../debug/gen.rs:1220:50
     |
1220 |         formatter.field("body", Lite(&self.value.body));
     |                                                  ^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprConst`
    --> tests/macros/../debug/gen.rs:1227:24
     |
1227 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprConst`
    --> tests/macros/../debug/gen.rs:1228:55
     |
1228 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `block` on type `ExprConst`
    --> tests/macros/../debug/gen.rs:1230:51
     |
1230 |         formatter.field("block", Lite(&self.value.block));
     |                                                   ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprContinue`
    --> tests/macros/../debug/gen.rs:1237:24
     |
1237 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprContinue`
    --> tests/macros/../debug/gen.rs:1238:55
     |
1238 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `label` on type `ExprContinue`
    --> tests/macros/../debug/gen.rs:1240:40
     |
1240 |         if let Some(val) = &self.value.label {
     |                                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprForLoop`
    --> tests/macros/../debug/gen.rs:1271:24
     |
1271 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprForLoop`
    --> tests/macros/../debug/gen.rs:1272:55
     |
1272 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `label` on type `ExprForLoop`
    --> tests/macros/../debug/gen.rs:1274:40
     |
1274 |         if let Some(val) = &self.value.label {
     |                                        ^^^^^ unknown field

error[E0609]: no field `pat` on type `ExprForLoop`
    --> tests/macros/../debug/gen.rs:1288:49
     |
1288 |         formatter.field("pat", Lite(&self.value.pat));
     |                                                 ^^^ unknown field

error[E0609]: no field `expr` on type `ExprForLoop`
    --> tests/macros/../debug/gen.rs:1289:50
     |
1289 |         formatter.field("expr", Lite(&self.value.expr));
     |                                                  ^^^^ unknown field

error[E0609]: no field `body` on type `ExprForLoop`
    --> tests/macros/../debug/gen.rs:1290:50
     |
1290 |         formatter.field("body", Lite(&self.value.body));
     |                                                  ^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprGroup`
    --> tests/macros/../debug/gen.rs:1297:24
     |
1297 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprGroup`
    --> tests/macros/../debug/gen.rs:1298:55
     |
1298 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `expr` on type `ExprGroup`
    --> tests/macros/../debug/gen.rs:1300:50
     |
1300 |         formatter.field("expr", Lite(&self.value.expr));
     |                                                  ^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprIf`
    --> tests/macros/../debug/gen.rs:1307:24
     |
1307 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprIf`
    --> tests/macros/../debug/gen.rs:1308:55
     |
1308 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `cond` on type `ExprIf`
    --> tests/macros/../debug/gen.rs:1310:50
     |
1310 |         formatter.field("cond", Lite(&self.value.cond));
     |                                                  ^^^^ unknown field

error[E0609]: no field `then_branch` on type `ExprIf`
    --> tests/macros/../debug/gen.rs:1311:57
     |
1311 |         formatter.field("then_branch", Lite(&self.value.then_branch));
     |                                                         ^^^^^^^^^^^ unknown field

error[E0609]: no field `else_branch` on type `ExprIf`
    --> tests/macros/../debug/gen.rs:1312:40
     |
1312 |         if let Some(val) = &self.value.else_branch {
     |                                        ^^^^^^^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprInfer`
    --> tests/macros/../debug/gen.rs:1343:24
     |
1343 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprInfer`
    --> tests/macros/../debug/gen.rs:1344:55
     |
1344 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprLet`
    --> tests/macros/../debug/gen.rs:1352:24
     |
1352 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprLet`
    --> tests/macros/../debug/gen.rs:1353:55
     |
1353 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `pat` on type `ExprLet`
    --> tests/macros/../debug/gen.rs:1355:49
     |
1355 |         formatter.field("pat", Lite(&self.value.pat));
     |                                                 ^^^ unknown field

error[E0609]: no field `expr` on type `ExprLet`
    --> tests/macros/../debug/gen.rs:1356:50
     |
1356 |         formatter.field("expr", Lite(&self.value.expr));
     |                                                  ^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprLoop`
    --> tests/macros/../debug/gen.rs:1373:24
     |
1373 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprLoop`
    --> tests/macros/../debug/gen.rs:1374:55
     |
1374 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `label` on type `ExprLoop`
    --> tests/macros/../debug/gen.rs:1376:40
     |
1376 |         if let Some(val) = &self.value.label {
     |                                        ^^^^^ unknown field

error[E0609]: no field `body` on type `ExprLoop`
    --> tests/macros/../debug/gen.rs:1390:50
     |
1390 |         formatter.field("body", Lite(&self.value.body));
     |                                                  ^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprMacro`
    --> tests/macros/../debug/gen.rs:1397:24
     |
1397 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprMacro`
    --> tests/macros/../debug/gen.rs:1398:55
     |
1398 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `mac` on type `ExprMacro`
    --> tests/macros/../debug/gen.rs:1400:49
     |
1400 |         formatter.field("mac", Lite(&self.value.mac));
     |                                                 ^^^ unknown field

error[E0609]: no field `attrs` on type `ExprMatch`
    --> tests/macros/../debug/gen.rs:1407:24
     |
1407 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprMatch`
    --> tests/macros/../debug/gen.rs:1408:55
     |
1408 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `expr` on type `ExprMatch`
    --> tests/macros/../debug/gen.rs:1410:50
     |
1410 |         formatter.field("expr", Lite(&self.value.expr));
     |                                                  ^^^^ unknown field

error[E0609]: no field `arms` on type `ExprMatch`
    --> tests/macros/../debug/gen.rs:1411:24
     |
1411 |         if !self.value.arms.is_empty() {
     |                        ^^^^ unknown field

error[E0609]: no field `arms` on type `ExprMatch`
    --> tests/macros/../debug/gen.rs:1412:54
     |
1412 |             formatter.field("arms", Lite(&self.value.arms));
     |                                                      ^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprMethodCall`
    --> tests/macros/../debug/gen.rs:1420:24
     |
1420 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprMethodCall`
    --> tests/macros/../debug/gen.rs:1421:55
     |
1421 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `receiver` on type `ExprMethodCall`
    --> tests/macros/../debug/gen.rs:1423:54
     |
1423 |         formatter.field("receiver", Lite(&self.value.receiver));
     |                                                      ^^^^^^^^ unknown field

error[E0609]: no field `method` on type `ExprMethodCall`
    --> tests/macros/../debug/gen.rs:1424:52
     |
1424 |         formatter.field("method", Lite(&self.value.method));
     |                                                    ^^^^^^ unknown field

error[E0609]: no field `turbofish` on type `ExprMethodCall`
    --> tests/macros/../debug/gen.rs:1425:40
     |
1425 |         if let Some(val) = &self.value.turbofish {
     |                                        ^^^^^^^^^ unknown field

error[E0609]: no field `args` on type `ExprMethodCall`
    --> tests/macros/../debug/gen.rs:1439:24
     |
1439 |         if !self.value.args.is_empty() {
     |                        ^^^^ unknown field

error[E0609]: no field `args` on type `ExprMethodCall`
    --> tests/macros/../debug/gen.rs:1440:54
     |
1440 |             formatter.field("args", Lite(&self.value.args));
     |                                                      ^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprRange`
    --> tests/macros/../debug/gen.rs:1482:24
     |
1482 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprRange`
    --> tests/macros/../debug/gen.rs:1483:55
     |
1483 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `start` on type `ExprRange`
    --> tests/macros/../debug/gen.rs:1485:40
     |
1485 |         if let Some(val) = &self.value.start {
     |                                        ^^^^^ unknown field

error[E0609]: no field `limits` on type `ExprRange`
    --> tests/macros/../debug/gen.rs:1499:52
     |
1499 |         formatter.field("limits", Lite(&self.value.limits));
     |                                                    ^^^^^^ unknown field

error[E0609]: no field `end` on type `ExprRange`
    --> tests/macros/../debug/gen.rs:1500:40
     |
1500 |         if let Some(val) = &self.value.end {
     |                                        ^^^ unknown field

error[E0609]: no field `attrs` on type `ExprReference`
    --> tests/macros/../debug/gen.rs:1520:24
     |
1520 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprReference`
    --> tests/macros/../debug/gen.rs:1521:55
     |
1521 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `mutability` on type `ExprReference`
    --> tests/macros/../debug/gen.rs:1523:23
     |
1523 |         if self.value.mutability.is_some() {
     |                       ^^^^^^^^^^ unknown field

error[E0609]: no field `expr` on type `ExprReference`
    --> tests/macros/../debug/gen.rs:1526:50
     |
1526 |         formatter.field("expr", Lite(&self.value.expr));
     |                                                  ^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprRepeat`
    --> tests/macros/../debug/gen.rs:1533:24
     |
1533 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprRepeat`
    --> tests/macros/../debug/gen.rs:1534:55
     |
1534 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `expr` on type `ExprRepeat`
    --> tests/macros/../debug/gen.rs:1536:50
     |
1536 |         formatter.field("expr", Lite(&self.value.expr));
     |                                                  ^^^^ unknown field

error[E0609]: no field `len` on type `ExprRepeat`
    --> tests/macros/../debug/gen.rs:1537:49
     |
1537 |         formatter.field("len", Lite(&self.value.len));
     |                                                 ^^^ unknown field

error[E0609]: no field `attrs` on type `ExprReturn`
    --> tests/macros/../debug/gen.rs:1544:24
     |
1544 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprReturn`
    --> tests/macros/../debug/gen.rs:1545:55
     |
1545 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `expr` on type `ExprReturn`
    --> tests/macros/../debug/gen.rs:1547:40
     |
1547 |         if let Some(val) = &self.value.expr {
     |                                        ^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprStruct`
    --> tests/macros/../debug/gen.rs:1567:24
     |
1567 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprStruct`
    --> tests/macros/../debug/gen.rs:1568:55
     |
1568 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `qself` on type `ExprStruct`
    --> tests/macros/../debug/gen.rs:1570:40
     |
1570 |         if let Some(val) = &self.value.qself {
     |                                        ^^^^^ unknown field

error[E0609]: no field `path` on type `ExprStruct`
    --> tests/macros/../debug/gen.rs:1584:50
     |
1584 |         formatter.field("path", Lite(&self.value.path));
     |                                                  ^^^^ unknown field

error[E0609]: no field `fields` on type `ExprStruct`
    --> tests/macros/../debug/gen.rs:1585:24
     |
1585 |         if !self.value.fields.is_empty() {
     |                        ^^^^^^ unknown field

error[E0609]: no field `fields` on type `ExprStruct`
    --> tests/macros/../debug/gen.rs:1586:56
     |
1586 |             formatter.field("fields", Lite(&self.value.fields));
     |                                                        ^^^^^^ unknown field

error[E0609]: no field `dot2_token` on type `ExprStruct`
    --> tests/macros/../debug/gen.rs:1588:23
     |
1588 |         if self.value.dot2_token.is_some() {
     |                       ^^^^^^^^^^ unknown field

error[E0609]: no field `rest` on type `ExprStruct`
    --> tests/macros/../debug/gen.rs:1591:40
     |
1591 |         if let Some(val) = &self.value.rest {
     |                                        ^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprTry`
    --> tests/macros/../debug/gen.rs:1611:24
     |
1611 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprTry`
    --> tests/macros/../debug/gen.rs:1612:55
     |
1612 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `expr` on type `ExprTry`
    --> tests/macros/../debug/gen.rs:1614:50
     |
1614 |         formatter.field("expr", Lite(&self.value.expr));
     |                                                  ^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprTryBlock`
    --> tests/macros/../debug/gen.rs:1621:24
     |
1621 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprTryBlock`
    --> tests/macros/../debug/gen.rs:1622:55
     |
1622 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `block` on type `ExprTryBlock`
    --> tests/macros/../debug/gen.rs:1624:51
     |
1624 |         formatter.field("block", Lite(&self.value.block));
     |                                                   ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprTuple`
    --> tests/macros/../debug/gen.rs:1631:24
     |
1631 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprTuple`
    --> tests/macros/../debug/gen.rs:1632:55
     |
1632 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `elems` on type `ExprTuple`
    --> tests/macros/../debug/gen.rs:1634:24
     |
1634 |         if !self.value.elems.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `elems` on type `ExprTuple`
    --> tests/macros/../debug/gen.rs:1635:55
     |
1635 |             formatter.field("elems", Lite(&self.value.elems));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprUnsafe`
    --> tests/macros/../debug/gen.rs:1654:24
     |
1654 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprUnsafe`
    --> tests/macros/../debug/gen.rs:1655:55
     |
1655 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `block` on type `ExprUnsafe`
    --> tests/macros/../debug/gen.rs:1657:51
     |
1657 |         formatter.field("block", Lite(&self.value.block));
     |                                                   ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprWhile`
    --> tests/macros/../debug/gen.rs:1664:24
     |
1664 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprWhile`
    --> tests/macros/../debug/gen.rs:1665:55
     |
1665 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `label` on type `ExprWhile`
    --> tests/macros/../debug/gen.rs:1667:40
     |
1667 |         if let Some(val) = &self.value.label {
     |                                        ^^^^^ unknown field

error[E0609]: no field `cond` on type `ExprWhile`
    --> tests/macros/../debug/gen.rs:1681:50
     |
1681 |         formatter.field("cond", Lite(&self.value.cond));
     |                                                  ^^^^ unknown field

error[E0609]: no field `body` on type `ExprWhile`
    --> tests/macros/../debug/gen.rs:1682:50
     |
1682 |         formatter.field("body", Lite(&self.value.body));
     |                                                  ^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprYield`
    --> tests/macros/../debug/gen.rs:1689:24
     |
1689 |         if !self.value.attrs.is_empty() {
     |                        ^^^^^ unknown field

error[E0609]: no field `attrs` on type `ExprYield`
    --> tests/macros/../debug/gen.rs:1690:55
     |
1690 |             formatter.field("attrs", Lite(&self.value.attrs));
     |                                                       ^^^^^ unknown field

error[E0609]: no field `expr` on type `ExprYield`
    --> tests/macros/../debug/gen.rs:1692:40
     |
1692 |         if let Some(val) = &self.value.expr {
     |                                        ^^^^ unknown field

Some errors have detailed explanations: E0412, E0433, E0609.
For more information about an error, try `rustc --explain E0412`.
error: could not compile `syn` (test "test_attribute") due to 403 previous errors
warning: build failed, waiting for other jobs to finish...
Some errors have detailed explanations: E0412, E0432, E0433, E0609.
error: could not compile `syn` (test "test_item") due to 404 previous errors
error: could not compile `syn` (test "test_stmt") due to 404 previous errors
error[E0277]: `DeriveInput` doesn't implement `Debug`
    --> tests/test_derive_input.rs:346:39
     |
346  |     syn::parse2::<DeriveInput>(input).unwrap_err();
     |                                       ^^^^^^^^^^ `DeriveInput` cannot be formatted using `{:?}` because it doesn't implement `Debug`
     |
     = help: the trait `Debug` is not implemented for `DeriveInput`
note: required by a bound in `Result::<T, E>::unwrap_err`
    --> /home/eddy/.rustup/toolchains/stable-s390x-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:1200:12
     |
1198 |     pub fn unwrap_err(self) -> E
     |            ---------- required by a bound in this associated function
1199 |     where
1200 |         T: fmt::Debug,
     |            ^^^^^^^^^^ required by this bound in `Result::<T, E>::unwrap_err`

Some errors have detailed explanations: E0277, E0412, E0433, E0609.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `syn` (test "test_derive_input") due to 404 previous errors
+ RESULT=101
+ cd /var/tmp/top100_artifacts
+ rm -rf /var/tmp/top100_artifacts/syn-2.0.0
+ exit 101
